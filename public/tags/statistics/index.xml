<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>statistics | Jin Jeon</title>
    <link>https://jinjeon.me/tags/statistics/</link>
      <atom:link href="https://jinjeon.me/tags/statistics/index.xml" rel="self" type="application/rss+xml" />
    <description>statistics</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2024 developed by Jin with HTML/CSS/Markdown and ☕️ </copyright><lastBuildDate>Sat, 01 May 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jinjeon.me/img/icon.png</url>
      <title>statistics</title>
      <link>https://jinjeon.me/tags/statistics/</link>
    </image>
    
    <item>
      <title>Sentiment Analysis, Textual Data Analysis, and Visualization Using Natural Language API</title>
      <link>https://jinjeon.me/post/textual-data-analysis/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://jinjeon.me/post/textual-data-analysis/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#link1&#34;&gt;What is Google Cloud API?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link2&#34;&gt;Survey Data in User Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link3&#34;&gt;Natural Language API Features&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
3.1 &lt;a href=&#34;#link3.1&#34;&gt;Entity Analysis&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
3.2 &lt;a href=&#34;#link3.2&#34;&gt;Sentiment Analysis&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
3.3 &lt;a href=&#34;#link3.3&#34;&gt;Entity Sentiment Analysis&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link4&#34;&gt;Loading in data using Google Sheets API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link5&#34;&gt;Dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link6&#34;&gt;Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link7&#34;&gt;Research Question&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
7.1 &lt;a href=&#34;#link7.1&#34;&gt;A. Health Rating by Gender&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
7.2 &lt;a href=&#34;#link7.2&#34;&gt;B. Health Rating by Age Group&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
7.3 &lt;a href=&#34;#link7.3&#34;&gt;C. T-test for Statistical Signifcance&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
7.4 &lt;a href=&#34;#link7.4&#34;&gt;D. Health Rating by Age &amp;amp; Gender Group&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
7.5 &lt;a href=&#34;#link7.5&#34;&gt;E. Iteratively Running t-test Within Each Age Group&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link8&#34;&gt;Data Visualization&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
8.1 &lt;a href=&#34;#link8.1&#34;&gt;Characterizing Textual Data Through Wordcloud&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link9&#34;&gt;Conclusion&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;a-namelink1-what-is-google-cloud-api-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; What is Google Cloud API? &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Google Cloud Platform&lt;/strong&gt; is a suite of cloud computing services that lets developers interact with APIs that involve data storage, data analytics, and machine learning. In this notebook, I build on to the previous notebook to call in the spreadsheets from Google Drive, and run textual data analysis using the Cloud Natural Language API and vector space models.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://cloud.google.com/natural-language&#34;&gt;Natural Language AI&lt;/a&gt;&lt;/strong&gt; is an API available in Google Cloud. It uses machine learning to analyze texts through sentiment analysis and extract information about the text itself. It offers three types of models:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Auto ML&lt;/strong&gt;: that allows you to train your own model&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;Natural Language API&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;: that offers pre-trained models to quickly boot up NLP.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Healthcare Natural Language AI&lt;/strong&gt;: that is specific for medical texts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the sake of time scope and complexity of the project, let&amp;rsquo;s use the Natural Language API to call in a pre-trained model to analyze textual data. The demo of the model can be found online here: &lt;a href=&#34;https://cloud.google.com/natural-language&#34;&gt;https://cloud.google.com/natural-language&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;a-namelink2-survey-data-in-user-research-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Survey Data in User Research &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;As a UX researcher, survey studies are essential for understanding the users because they can be quickly developed and sent out to receive a good amount of sample in a short period of time. &lt;strong&gt;Surveys are powerful tools to be utilized for conducting preliminary research at the discovery stage to explore the general problem space and user behaviors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the free and efficient tools is the Google Forms. While it can automatically generate pie graphs and bar graphs to summarize the survey results, the results are often too limited. &lt;strong&gt;As researchers, we might be interested in learning more in depth about the data. After all, it is researchers&#39; role to develop a keen sense to analyze the data and drive insights.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance, the screenshots below show sample summaries of what Google Form summary is capable of doing.&lt;/p&gt;
&lt;h4 id=&#34;breakdown-of-participants-age-range&#34;&gt;Breakdown of participants&#39; age range&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./age.png&#34; alt=&#34;Age Breakdown&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;participants-self-perception-of-their-health-wellness&#34;&gt;Participants&#39; self perception of their health wellness&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./rating.png&#34; alt=&#34;Rating by Participants&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The graphs above do not show any relationship between the data.&lt;/strong&gt; To drive more meaningful insights, we would want to explore if there are any relationships between the data. For example, we would want to know how self perception of health wellness varies by different age groups. Do older people perceive themselves to be less healthy than young people do? While the ratings are subjective, the analysis itself can hint towards meaningful insights.&lt;/p&gt;
&lt;h4 id=&#34;objectives&#34;&gt;Objectives&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;I use GoogleSheets API to call in the data and analyze the survey results to visualize the relationship between data and test statistical significance. I also incorporate Natural Language API to analyze textual data collected from the survey, and visualize them through violin graphs and word cloud.&lt;/strong&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;a-namelink3-natural-language-api-features-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Natural Language API Features &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Before diving straight to working with data, let&amp;rsquo;s take a look at some of the features of NL API.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Imports the Google Cloud client library&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.cloud &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; language_v1

&lt;span style=&#34;color:#75715e&#34;&gt;# set environment for credentials (need to be called with every start of instance)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# refer the reference tab for setting credentials&lt;/span&gt;
os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GOOGLE_APPLICATION_CREDENTIALS&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/Jin/google-cloud-sdk/natural-language-api.json&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Instantiates a client&lt;/span&gt;
client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LanguageServiceClient()

&lt;span style=&#34;color:#75715e&#34;&gt;# Available types: PLAIN_TEXT, HTML&lt;/span&gt;
type_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PLAIN_TEXT

encoding_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;EncodingType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UTF8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the scope of this project, let&amp;rsquo;s look at some specific methods that NL API offers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Entity analysis&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;2. Sentiment analysis&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;3. Entity Sentiment analysis&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-namelink31-1-entity-analysis-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 1. Entity analysis &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;analyze_entities&lt;/code&gt;: inspects the given text for known entities (proper nouns such as public figures, landmarks, etc.), and returns information about those entities.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# grab a random text from wikipedia&lt;/span&gt;
text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The University of Washington is a public research university in Seattle, Washington.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Ana Mari Cauce is the president.&amp;#34;&lt;/span&gt;

document &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: text, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type_&amp;#34;&lt;/span&gt;: type_}

response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;analyze_entities(request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;document&amp;#39;&lt;/span&gt;: document, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encoding_type&amp;#39;&lt;/span&gt;: encoding_type})

&lt;span style=&#34;color:#75715e&#34;&gt;# Loop through entitites returned from the API&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; entity &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entities:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entity name: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name))

    &lt;span style=&#34;color:#75715e&#34;&gt;# Get entity type, e.g. PERSON, LOCATION, ADDRESS, NUMBER, et al&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entity type: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Type(entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type_)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name))

    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the salience score associated with the entity in the [0, 1.0] range&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salience score: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;salience) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Entity name: University of Washington
Entity type: ORGANIZATION
Salience score: 0.7374827265739441

Entity name: Ana Mari Cauce
Entity type: PERSON
Salience score: 0.11040862649679184

Entity name: Washington
Entity type: LOCATION
Salience score: 0.07763731479644775

Entity name: Seattle
Entity type: LOCATION
Salience score: 0.07447130978107452
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;a-namelink32-2-sentiment-analysis-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 2. Sentiment analysis &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;analyze_sentiment&lt;/code&gt;: inspects the given text and identifies the prevailing emotional opinion within the text, especially to determine a writer&amp;rsquo;s attitude as positive, negative, or neutral.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;analyze_sentiment&lt;/span&gt;(text):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    a simple function created to run sentiment analysis for a given text.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ----------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    text : str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        string of text to be analyzed
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sentiment.score: float
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sentiment.magnitude: float
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        a non-negative number in the [0, +inf) range, which represents the absolute &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        magnitude of sentiment regardless of score (positive or negative).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    document &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Document(content&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;text, type_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PLAIN_TEXT)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Detects the sentiment of the text&lt;/span&gt;
    sentiment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;analyze_sentiment(request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;document&amp;#39;&lt;/span&gt;: document})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;document_sentiment

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(text))
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sentiment: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score, sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;magnitude))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score, sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;magnitude
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try feeding in some random sentences and see how sentiments come out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The text to analyze&lt;/span&gt;
text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The dish was delightfully surprising.&amp;#34;&lt;/span&gt;
text2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The overall experience was terrible.&amp;#34;&lt;/span&gt;

analyze_sentiment(text)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
_, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; analyze_sentiment(text2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Text: The dish was delightfully surprising.
Sentiment: 0.8999999761581421, 0.8999999761581421


Text: The overall experience was terrible.
Sentiment: -0.800000011920929, 0.800000011920929
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;a-namelink33-3-entity-sentiment-analysis-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 3. Entity sentiment analysis &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;analyze_entity_sentiment&lt;/code&gt;: combines both entity analysis and sentiment analysis and attempts to determine the sentiment (positive or negative) expressed about entities within the text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;analyze_entity_sentiment&lt;/span&gt;(text):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    a simple function to run entity sentiment analysis for a given text.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ----------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    text : str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        string of text to be analyzed
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    entity.name: str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        name of the entity identified
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    entity.type.name: str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        type of the entity identified
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sentiment.score: float
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sentiment.magnitude: float
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        a non-negative number in the [0, +inf) range, which represents the absolute &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        magnitude of sentiment regardless of score (positive or negative).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    document &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: text, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type_&amp;#34;&lt;/span&gt;: type_}

    encoding_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;EncodingType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UTF8

    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;analyze_entity_sentiment(request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;document&amp;#39;&lt;/span&gt;: document, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encoding_type&amp;#39;&lt;/span&gt;: encoding_type})
    &lt;span style=&#34;color:#75715e&#34;&gt;# Loop through entitites returned from the API&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; entity &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entities:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entity name: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name))

        &lt;span style=&#34;color:#75715e&#34;&gt;# Get entity type, e.g. PERSON, LOCATION, ADDRESS, NUMBER, et al&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entity type: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Type(entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type_)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name))

        &lt;span style=&#34;color:#75715e&#34;&gt;# Get the salience score associated with the entity in the [0, 1.0] range&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salience score: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;salience))

        &lt;span style=&#34;color:#75715e&#34;&gt;# Get the aggregate sentiment expressed for this entity in the provided document.&lt;/span&gt;
        sentiment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sentiment
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entity sentiment score: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score))
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entity sentiment magnitude: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;magnitude))
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name, language_v1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Type(entity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type_)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name, sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score, sentiment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;magnitude
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try feeding in one neutral sentence, and a positive sentence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The University of Washington is a public research university in Seattle, Washington.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        The HCDE Department offers amazing opportunities to study UX and HCI.&amp;#34;&lt;/span&gt;

_, _, _, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; analyze_entity_sentiment(text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Entity name: University of Washington
Entity type: ORGANIZATION
Salience score: 0.7403186559677124
Entity sentiment score: 0.0
Entity sentiment magnitude: 0.0


Entity name: Washington
Entity type: LOCATION
Salience score: 0.07140954583883286
Entity sentiment score: 0.0
Entity sentiment magnitude: 0.0


Entity name: Seattle
Entity type: LOCATION
Salience score: 0.06301160156726837
Entity sentiment score: 0.0
Entity sentiment magnitude: 0.0


Entity name: HCDE Department
Entity type: ORGANIZATION
Salience score: 0.04862694814801216
Entity sentiment score: 0.8999999761581421
Entity sentiment magnitude: 0.8999999761581421


Entity name: UX
Entity type: OTHER
Salience score: 0.03587672486901283
Entity sentiment score: 0.699999988079071
Entity sentiment magnitude: 0.699999988079071


Entity name: HCI
Entity type: OTHER
Salience score: 0.025248046964406967
Entity sentiment score: 0.800000011920929
Entity sentiment magnitude: 0.800000011920929


Entity name: opportunities
Entity type: OTHER
Salience score: 0.015508485026657581
Entity sentiment score: 0.8999999761581421
Entity sentiment magnitude: 0.8999999761581421
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the result above, we can see that the first sentiment of the entities identified in the first sentence, such as &amp;lsquo;University of Washington&amp;rsquo; or &amp;lsquo;Seattle&amp;rsquo; has a sentiment score of 0.0 which means neutral. This makes sense because the sentence was directly pulled from Wikipedia. On the other hand, the second sentence I wrote highlights &amp;lsquo;HCDE Department&amp;rsquo; as an entity with positive sentiment score of 0.8999.&lt;/p&gt;
&lt;h4 id=&#34;so-whats-next&#34;&gt;So what&amp;rsquo;s next?&lt;/h4&gt;
&lt;p&gt;We can interchangeably use the two functions defined &lt;code&gt;analyze_sentiment&lt;/code&gt; and &lt;code&gt;analyze_entity_sentiment&lt;/code&gt; to identify the overall sentiment of a given text or entity if specified in the data analysis process.&lt;/p&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;a-namelink4-loading-in-data-using-google-sheets-api-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Loading in data using Google Sheets API &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;The following code will only run if you have your Google &lt;code&gt;credential.json&lt;/code&gt; and &lt;code&gt;token.json&lt;/code&gt; within the working directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print_function
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os.path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.discovery &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; build
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google_auth_oauthlib.flow &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; InstalledAppFlow
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.auth.transport.requests &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Request
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.oauth2.credentials &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Credentials

SCOPES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.googleapis.com/auth/spreadsheets.readonly&amp;#39;&lt;/span&gt;]
SPREADSHEET_ID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;11Den6g5nuR4B2CCUML1KrA0bEZXRpPZ7t83Ieyi7NJ4&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Specify which sheet or row/column of data to call in&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# refer to https://developers.google.com/sheets/api/guides/concepts#a1_notation for detail&lt;/span&gt;
RANGE_NAME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;health_data&amp;#39;&lt;/span&gt;

creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Credentials&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_authorized_user_file(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token.json&amp;#39;&lt;/span&gt;, SCOPES)
service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sheets&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v4&amp;#39;&lt;/span&gt;, credentials&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;creds)

&lt;span style=&#34;color:#75715e&#34;&gt;# Call the Sheets API to read in the data&lt;/span&gt;
sheet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spreadsheets()
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sheet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(spreadsheetId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SPREADSHEET_ID,
                            range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RANGE_NAME)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;values&amp;#39;&lt;/span&gt;, [])

&lt;span style=&#34;color:#75715e&#34;&gt;# convert the sheet to pandas dataframe so we can easily manipulate the data&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(values[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;values[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# let&amp;#39;s confirm&lt;/span&gt;
print(type(data))

data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;

(71, 27)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;a-namelink5-dataset-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Dataset &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;From the code above, we translated the data into pandas dataframe. Using &lt;code&gt;data.shape&lt;/code&gt;, we know that there are total 27 questions collected from 71 participants. For simplicity, I remove any data that does not prefer to disclose gender. This brings the data size to 68. Due to the extensive length and branching logic within the survey, the data becomes more textual and qualitative for questions or columns in the back. I will primarily use selected columns that are of interest.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a quick glance at the dataset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for simplicity, let&amp;#39;s constrain the gender option to only two&lt;/span&gt;
gender_options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Man&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Woman&amp;#39;&lt;/span&gt;]
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your gender?&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(gender_options)]

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;There are total &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(len(data)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; participants.&amp;#39;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The survey consists of &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; questions (columns in the dataframe).&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# convert the column string values to integers&lt;/span&gt;
data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How would you rate your health?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How would you rate your health?&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)

data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;There are total 69 participants.
The survey consists of 27 questions (columns in the dataframe).
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;a-namelink6-data-analysis-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Data Analysis &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have seen the general dataframe structure, let&amp;rsquo;s explore probing the data for analysis.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Counter
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; nltk.corpus &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; stopwords
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; warnings
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; wordcloud &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; WordCloud, STOPWORDS, ImageColorGenerator
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; scipy
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

warnings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simplefilter(action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;, category&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FutureWarning&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# suppress any warning&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_color_codes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pastel&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# set color&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;querying-data&#34;&gt;Querying data&lt;/h3&gt;
&lt;p&gt;Before we play around with data, let&amp;rsquo;s query out the data that are of interest. This way we can manipulate the data more effectively without having to call on the entire dataset &lt;code&gt;data&lt;/code&gt; everytime.&lt;/p&gt;
&lt;p&gt;There are total 7 different age groups.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# let&amp;#39;s divde the data by gender first&lt;/span&gt;
females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your gender?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Woman&amp;#39;&lt;/span&gt;]
males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your gender?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Man&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# let&amp;#39;s also create dataset divided by age group&lt;/span&gt;
age_under18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Under 18&amp;#39;&lt;/span&gt;]
age_18to24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;18 - 24&amp;#39;&lt;/span&gt;]
age_25to34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;25 - 34&amp;#39;&lt;/span&gt;]
age_35to44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;35 - 44&amp;#39;&lt;/span&gt;]
age_45to54 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;45 - 54&amp;#39;&lt;/span&gt;]
age_55to64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;55 - 64&amp;#39;&lt;/span&gt;]
age_over65 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;65 or older&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(len(males))
print(len(females))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;31
38
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;a-namelink7-research-question-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Research Question &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;em&gt;How does self-perception of health rating differ by gender and age?&lt;/em&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Participants were asked, How would you rate your health? (5 being healthy, 1 being not healthy).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;a-namelink71-a-health-rating-by-gender-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; A. Health rating by gender &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s breakdown the data to see how self-perception of health wellness varies by gender and different age groups. In the code below, I first quary females and males from the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# columns[4] is the column for health rating&lt;/span&gt;
mean_males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(males[males&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]])
mean_females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(females[females&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]])

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mean of males&amp;#39; self-health wellness: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(mean_males))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mean of females&amp;#39; self-health wellness: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(mean_females))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Mean of males&#39; self-health wellness: 3.5161290322580645
Mean of females&#39; self-health wellness: 3.4473684210526314
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;a-namelink72-b-health-rating-by-age-group-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; B. Health rating by age group &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s breakdown the data to see how self-perception of health wellness varies by different age groups.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How would you rate your health?&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()
age
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;What age range are you?
18 - 24        3.615385
25 - 34        3.285714
35 - 44        3.500000
45 - 54        3.375000
55 - 64        3.600000
65 or older    4.000000
Under 18       3.000000
Name: How would you rate your health?, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Conversely, the age group 65 or older actually has the highest self-perception of wellness.&lt;/strong&gt; The youngest group (age under 18) rated the lowest.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;a-namelink73-c-t-test-for-statistical-signifcance-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; C. T-test for statistical signifcance &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;With small samples of the two demographic groups &lt;code&gt;65 or older&lt;/code&gt; and &lt;code&gt;Under 18&lt;/code&gt;, we are not sure if the difference we see here is significant. &lt;strong&gt;Let&amp;rsquo;s run a quick t-test to see if the difference we are seeing is statistically significant.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;t, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scipy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ttest_ind(age_over65[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How would you rate your health?&amp;#39;&lt;/span&gt;], age_under18[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How would you rate your health?&amp;#39;&lt;/span&gt;])

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))  
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))  &lt;span style=&#34;color:#75715e&#34;&gt;# the p-val should be less than 0.05 in general to assume the difference we observe is signifcant&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;t: 2.8983
p: 0.0199
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see the p-value is 0.01 which is signifcant, which is one interesting find! So we can say that within this dataset, the people age over 65 perceive themselves to be more healthy than teenagers would do.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;a-namelink74-d-health-rating-by-age--gender-group-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; D. Health rating by age &amp;amp; gender group &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s breakdown by both gender and different age groups to look at how the self perception of health wellness change.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;age_gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your gender?&amp;#39;&lt;/span&gt;])[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How would you rate your health?&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

age_gender
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;What age range are you?  What is your gender?
18 - 24                  Man                     3.43
                         Woman                   3.83
25 - 34                  Man                     3.43
                         Woman                   3.21
35 - 44                  Man                     3.80
                         Woman                   3.29
45 - 54                  Man                     3.40
                         Woman                   3.33
55 - 64                  Man                     3.33
                         Woman                   4.00
65 or older              Man                     4.00
                         Woman                   4.00
Under 18                 Man                     3.00
                         Woman                   3.00
Name: How would you rate your health?, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;a-namelink75-e-iteratively-running-t-test-within-each-age-group-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; E. Iteratively running t-test within each age group &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;We have several different age groups with each male and female gender group. Within each age group, let&amp;rsquo;s run a t-test to see if there are any significant observed differences.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;gender_options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Man&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Woman&amp;#39;&lt;/span&gt;]
age_groups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age_under18&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age_18to24&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age_25to34&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age_35to44&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age_45to54&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age_55to64&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age_over65&amp;#39;&lt;/span&gt;]

table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age group&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p value&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# iteratively run for t-tests within each age group defined in the list variable &amp;#39;age_groups&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(age_groups)):
    data_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;How would you rate your health?&amp;#39;]&amp;#34;&lt;/span&gt;
    eval_string1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age_groups[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.loc[&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; age_groups[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;What is your gender?&amp;#39;] == &amp;#39;Man&amp;#39;]&amp;#34;&lt;/span&gt;
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval(eval_string1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data_string)
    eval_string2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age_groups[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.loc[&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; age_groups[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;What is your gender?&amp;#39;] == &amp;#39;Woman&amp;#39;]&amp;#34;&lt;/span&gt;
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval(eval_string2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data_string)
&lt;span style=&#34;color:#75715e&#34;&gt;#     strings_combined = &amp;#39;scipy.stats.ttest_ind(a, b)&amp;#39;&lt;/span&gt;

    t, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scipy.stats.ttest_ind(a, b)&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# we use a package called tabulate to print out a formatted table&lt;/span&gt;
    table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([age_groups[i], t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) ,p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)])

print(tabulate(table, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;firstrow&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;age group      t value    p value
-----------  ---------  ---------
age_under18   nan        nan
age_18to24     -1.1315     0.2819
age_25to34      0.4504     0.6575
age_35to44      0.9682     0.3558
age_45to54      0.1637     0.8754
age_55to64     -0.7746     0.495
age_over65      0          1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;We see that the p-values are all above 0.05 which means that there are no observed significant differences in gender within each age group.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;a-namelink8-data-visualization-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Data Visualization &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first try plotting a simple visual violin plot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;age_plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;catplot(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What age range are you?&amp;#39;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How would you rate your health?&amp;#39;&lt;/span&gt;, \
                       hue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your gender?&amp;#39;&lt;/span&gt;, kind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;violin&amp;#34;&lt;/span&gt;, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./TextualDataAnalysis_39_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;a-namelink81-characterizing-textual-data-through-wordcloud-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Characterizing textual data through wordcloud &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s change focus and try analyzing textual inputs from the participants. We will analyze the column How is your health and/or fitness information being used? question to identify any emerging keywords using the word cloud representation. Disclaimer: The result here is not such a useful or accurate representation as the stopwords did not clearly filter out.&lt;/p&gt;
&lt;p&gt;We first call in a list of stopwords to filter out any unnecessary words, such as &amp;lsquo;I&amp;rsquo;, &amp;lsquo;and&amp;rsquo;, and etc. We then flatten out all the responses into a single list of words.&lt;/p&gt;
&lt;h3 id=&#34;is-there-gender-difference-in-how-they-use-health-data-text-responses&#34;&gt;Is there gender difference in how they use health data (text responses)?&lt;/h3&gt;
&lt;p&gt;Participants were asked, &amp;ldquo;How is your health and/or fitness information being used?&amp;rdquo; Here, I try to breakdown the text data through representation of wordcloud, and see if there any characteristics found in each gender.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# builtin stopword sets from nltk&lt;/span&gt;
stop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(stopwords&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;words(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;english&amp;#39;&lt;/span&gt;))


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot_wordcloud&lt;/span&gt;(df, col, separator&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Plots a wordcloud of given dataframe and specific column. The text is counted at word level.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ----------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    df: pandas dataframe
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        dataframe that contains textual data
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    col: int
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        integer that points to the specific column with textual data
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    separator: str (default: None)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        string specified to breakdown the text by. Default is empty space
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Wordcloud plot
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    list of most common words in the dataframe
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter out any NaNs&lt;/span&gt;
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; df[df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns[col]] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x]
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter out any None&lt;/span&gt;
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; response &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;]

    word_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(response)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; separator &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
            word_dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(response[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            word_dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(response[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(separator))
    word_filtered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#75715e&#34;&gt;# flatten the list and lower all letter cases&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sublist &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; word_dict:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sublist:
            word_filtered&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower())

    &lt;span style=&#34;color:#75715e&#34;&gt;# remove stopwords&lt;/span&gt;
    word_filtered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; word_filtered &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stop]

    word_filtered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [word&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; word_filtered]

    &lt;span style=&#34;color:#75715e&#34;&gt;# print most common words&lt;/span&gt;
    most_common_words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(word_filtered)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;most_common(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
    print(most_common_words)

    &lt;span style=&#34;color:#75715e&#34;&gt;# plot wordcloud&lt;/span&gt;
    texts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(word &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; word_filtered)
    cloud &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WordCloud(max_font_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, max_words&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, background_color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate(texts)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;imshow(cloud, interpolation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bilinear&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# plot wordcloud for Man&lt;/span&gt;
plot_wordcloud(males, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 24 specifies the column number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[(&#39;me&#39;, 2), (&#39;adjust&#39;, 2), (&#39;overall&#39;, 2), (&#39;personal&#39;, 2), (&#39;im&#39;, 2), (&#39;its&#39;, 1), (&#39;used&#39;, 1), (&#39;simply&#39;, 1), (&#39;interests&#39;, 1), (&#39;food&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./TextualDataAnalysis_42_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# plot wordcloud for Woman&lt;/span&gt;
plot_wordcloud(females, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[(&#39;use&#39;, 4), (&#39;see&#39;, 4), (&#39;im&#39;, 4), (&#39;bit&#39;, 3), (&#39;more&#39;, 3), (&#39;less&#39;, 3), (&#39;food&#39;, 3), (&#39;know&#39;, 3), (&#39;sleep&#39;, 2), (&#39;information&#39;, 2)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./TextualDataAnalysis_43_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top image is the wordcloud of male participants and the bottom is that of female participants. We see that some words are not as meaningful and that one critical fault to this approach is that breaking down the responses into word level can misrepresent the meaning of their responses. For example, &amp;lsquo;exercise&amp;rsquo; and &amp;lsquo;not exercise&amp;rsquo; have two opposing ideas but here, it would count &amp;lsquo;not&amp;rsquo; and &amp;lsquo;exercise&amp;rsquo; as two seperate ideas.&lt;/p&gt;
&lt;p&gt;Even though the word counts are small, we see more &amp;lsquo;food&amp;rsquo; and &amp;lsquo;sleep&amp;rsquo; for female participants, leading to an assumption that it could be related to going on diets.&lt;/p&gt;
&lt;h3 id=&#34;analyzing-categorical-data-using-wordcloud&#34;&gt;Analyzing categorical data using wordcloud&lt;/h3&gt;
&lt;p&gt;Participants were also asked, &amp;ldquo;what actions do you take regarding your health?&amp;rdquo; with multiple choices answer selections that include&amp;hellip;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;lsquo;exercise&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;take medication or health supplements&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;track health or fitness&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;learn more about health&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;receive regular treatment at clinic&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;maintain a diet&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;receive mental counseling.&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plot_wordcloud(males, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[(&#39;exercise&#39;, 29), (&#39;take medication and/or health supplements&#39;, 10), (&#39;track your health and/or fitness&#39;, 9), (&#39;learn more about your health (eg from online friends or community)&#39;, 8), (&#39;maintain a diet&#39;, 8), (&#39;receive regular treatment and/or consultation at clinic&#39;, 3), (&#39;none of the above&#39;, 2)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./TextualDataAnalysis_46_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plot_wordcloud(females, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[(&#39;exercise&#39;, 30), (&#39;take medication and/or health supplements&#39;, 27), (&#39;track your health and/or fitness&#39;, 24), (&#39;learn more about your health (eg from online friends or community)&#39;, 17), (&#39;receive regular treatment and/or consultation at clinic&#39;, 17), (&#39;maintain a diet&#39;, 16), (&#39;receive mental counseling&#39;, 7)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./TextualDataAnalysis_47_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the two results above, we see that exercise is the most common practice for keeping up health in both genders. However, we see that in general, women tend to do more activities or attempts to maintain their health e.g. by more frequently visiting a clinic or receive counseling, whereas two men responded they simply do nothing at all.&lt;/p&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;a-namelink9-conclusion--thoughts-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Conclusion &amp;amp; Thoughts &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Wordcloud is a fun, engaging representation of textual data. However, more caution and consideration are needed because it can also tweak how the data is represented. For example, I coded the function so that it would breakdown any sentences or phrases into word level. This means that if someone does &amp;lsquo;not exercise&amp;rsquo;, it would still count &amp;lsquo;exercise&amp;rsquo; and the end result would show &amp;lsquo;exercise&amp;rsquo; being emphasized more. While the context of exercise is present, the meaning is totally the opposite.&lt;/p&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;GoogleSheets API v4: &lt;a href=&#34;https://developers.google.com/sheets/api/samples/reading&#34;&gt;https://developers.google.com/sheets/api/samples/reading&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Oauth: &lt;a href=&#34;https://developers.google.com/identity/protocols/oauth2/service-account#python&#34;&gt;https://developers.google.com/identity/protocols/oauth2/service-account#python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google API Python Client: &lt;a href=&#34;https://github.com/googleapis/google-api-python-client/blob/master/docs/oauth.md&#34;&gt;https://github.com/googleapis/google-api-python-client/blob/master/docs/oauth.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Credentials: &lt;a href=&#34;https://developers.google.com/workspace/guides/create-credentials&#34;&gt;https://developers.google.com/workspace/guides/create-credentials&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Statistical Data Analysis in Cross-Cultural Research</title>
      <link>https://jinjeon.me/post/quant-ux/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://jinjeon.me/post/quant-ux/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I use survey data collected from Amazon Mechanical Turk and Reddit user groups (all personal data  have been removed) in a study to examine the impact of cultural localization on web-based account creation between American and Korean users. I use the experiment data to display basic statistical tests in Python.&lt;/p&gt;
&lt;h3 id=&#34;research-question&#34;&gt;Research Question:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is there a difference in providing personal information between USA and Korean Internet users &lt;!-- raw HTML omitted --&gt;
within two different use scenarios: online banking and shopping?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I use the following tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#link1&#34;&gt;Pearson Correlation Coefficient&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#link2&#34;&gt;T-Test&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#link3&#34;&gt;Mann-Whitney Test&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#link4&#34;&gt;One-Way Analysis of Variance (ANOVA)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#link5&#34;&gt;Two-Way ANOVA&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; scipy
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; statsmodels.formula.api &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ols
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; statsmodels.formula.api &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; smf
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; statsmodels.api &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sm
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; statsmodels.stats.anova &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AnovaRM
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pdb  &lt;span style=&#34;color:#75715e&#34;&gt;# for debugging&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; warnings
warnings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simplefilter(action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;, category&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FutureWarning&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# set color&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_color_codes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pastel&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setup--querying-data&#34;&gt;Setup &amp;amp; Querying Data&lt;/h2&gt;
&lt;p&gt;It is first critical to understand the dataframe to play around and make analysis. Usually, &lt;strong&gt;&lt;em&gt;long-format&lt;/em&gt;&lt;/strong&gt; data is desired (or at least I&amp;rsquo;m used to it) for using Python and Seaborn for data visualization. Long format is basically when each variable is represented as a column, and each observation or event is a row. Below, we read in, and query the data.&lt;/p&gt;
&lt;h4 id=&#34;useful-commands&#34;&gt;Useful commands:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;df.head()&lt;/code&gt;: by default, shows first five rows of df&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.columns()&lt;/code&gt;: prints all the columns in df&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.describe()&lt;/code&gt;: provides summary description of df&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd.read_csv(data, usecols=[&#39;col1&#39;, &#39;col2&#39;, ...,])&lt;/code&gt;: can be used to filter columns&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# read in data.csv file as df &amp;amp; see data structure&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.csv&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# query data by scenario and culture&lt;/span&gt;
bank &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scenario == &amp;#39;Bank&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
shop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scenario == &amp;#39;Shop&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
kor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;culture == &amp;#39;Korea&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
usa &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;culture == &amp;#39;USA&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# an example of the data structure&lt;/span&gt;
usa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-namelink1-1-pearson-correlation-coefficient-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 1. Pearson Correlation Coefficient &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;When we want to ask &lt;em&gt;&amp;ldquo;how strongly correlated are the two variables?&amp;quot;&lt;/em&gt;, we can use &lt;strong&gt;Perason&amp;rsquo;s Correlation&lt;/strong&gt;. It is used to measure statistical relationship or association between two &lt;strong&gt;&lt;em&gt;continuous variables&lt;/em&gt;&lt;/strong&gt; that are linearly related to each other. The coefficient value &lt;em&gt;&amp;ldquo;r&amp;rdquo;&lt;/em&gt; ranges from -1 (negative relation) to 1 (perfectly positive). 0 would mean that there is no relationship at all.&lt;/p&gt;
&lt;h3 id=&#34;properties-of-pearson-correlation&#34;&gt;Properties of Pearson Correlation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The units of the values do not affect the Pearson Correlation.
&lt;ul&gt;
&lt;li&gt;i.e. Changing the unit of value from cm to inches do not affect the r value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The correlation between the two variables is symmetric:
&lt;ul&gt;
&lt;li&gt;i.e. A -&amp;gt; B is equal to B -&amp;gt; A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** Use &lt;strong&gt;&lt;em&gt;Spearman&amp;rsquo;s Correlation&lt;/em&gt;&lt;/strong&gt; when the two variables have non-linear relationship (e.g. a curve instead of a straight line).&lt;/p&gt;
&lt;h3 id=&#34;code-implementation&#34;&gt;Code Implementation&lt;/h3&gt;
&lt;p&gt;We use scipy package to calculate the Pearson Correlation. The method will return two values: &lt;strong&gt;&lt;em&gt;r&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;p&lt;/em&gt;&lt;/strong&gt; value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# let&amp;#39;s look at the correlation of information provided by different scenarios: online banking vs. shopping&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# bank[&amp;#39;percent&amp;#39;] will return an array of percentage values&lt;/span&gt;

r, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scipy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pearsonr(bank[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;percent&amp;#39;&lt;/span&gt;], shop[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;percent&amp;#39;&lt;/span&gt;])  
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;r: 0.7592
p: 0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the results above, we can see &lt;strong&gt;there is a strong positive relationship between the amount of information provided in banking and shopping.&lt;/strong&gt; i.e. Providing information in banking would affect how a user provides personal information in shopping.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-namelink2-2-t-test-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 2. T-Test &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;When comparing the means of two groups, we can use a &lt;strong&gt;t-test&lt;/strong&gt;. It takes into account of the means and the spread of the data to determine &lt;strong&gt;&lt;em&gt;whether a difference between the two would occur by chance or not&lt;/em&gt;&lt;/strong&gt; (determined by the p-value being less than 0.05 usually). In a t-test, there should be only two independent variables (categorical/nominal variables) and one dependent continuous variable.&lt;/p&gt;
&lt;h3 id=&#34;properties-of-t-test&#34;&gt;Properties of t-test&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The data is assumed to be &lt;strong&gt;normal&lt;/strong&gt; (If the distribution is skewed, use Mann-Whitney test). &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;T-test yields &lt;strong&gt;&lt;em&gt;t&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;p&lt;/em&gt;&lt;/strong&gt; value:&lt;!-- raw HTML omitted --&gt;
2a. &lt;strong&gt;The higher the t, the more difference there is between the two groups.&lt;/strong&gt; The lower the t, the more similar the two groups are.&lt;!-- raw HTML omitted --&gt;
2b. T-value of 2 means the groups are twice as different from each other than they are within each other&lt;!-- raw HTML omitted --&gt;
2c. &lt;strong&gt;The lower the p-value, the better&lt;/strong&gt; (meaning that it is significant and the difference did not occure by chance). P-value of 0.05 means that there is 5 percent happening by chance&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;code-implementation-1&#34;&gt;Code Implementation&lt;/h3&gt;
&lt;p&gt;We use scipy package again to run a t-test. Before we decide which test to run, we can quickly plot and see the distribution like below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distplot(df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scenario&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bank&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1c238f61d0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./output_10_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The distribution looks relatively normal. We can run a t-test to see whether there is a difference between the total amount of information provided by the users from each use scenario: i.e. banking vs. shopping&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# we run a t-test to see whether there ia a difference in the amount of information provided in each scenario&lt;/span&gt;
t, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scipy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ttest_ind(df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scenario&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bank&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent, df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scenario&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shop&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;t: 4.8203
p: 2e-06
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result above shows that there is a significant difference in the amount of information provided between two use scenarios with t-value being high, and p-value being very small. However, we don&amp;rsquo;t actually know which scenario yields more information than the other. The t-test only tells there is a significant difference.&lt;/p&gt;
&lt;p&gt;To find out, we can create a little fancy distribution plot with some box plots:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;banking &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scenario&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bank&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent
shopping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scenario&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shop&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent

&lt;span style=&#34;color:#75715e&#34;&gt;# let&amp;#39;s plot box-dist plot combined&lt;/span&gt;
f, (ax_box1, ax_box2, ax_dist) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, sharex&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
                                              gridspec_kw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;height_ratios&amp;#34;&lt;/span&gt;: (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)})

&lt;span style=&#34;color:#75715e&#34;&gt;# add boxplots at the top&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;boxplot(banking, ax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ax_box1, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;)
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;boxplot(shopping, ax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ax_box2, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;)
ax_box1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(banking), color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)
ax_box2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(shopping), color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots_adjust(top&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.87&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;suptitle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Amount of information provided by use scenario&amp;#39;&lt;/span&gt;, fontsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# add distplots below&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distplot(banking, ax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ax_dist, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Banking&amp;#39;&lt;/span&gt;, kde&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, rug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;, norm_hist&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distplot(shopping, ax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ax_dist, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shopping&amp;#39;&lt;/span&gt;, kde&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, rug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;, norm_hist&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

ax_dist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(banking), color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)
ax_dist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(shopping), color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend()
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Percentage of information&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
ax_box1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(xlabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
ax_box2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(xlabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[Text(0.5, 0, &#39;&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./output_14_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the graph above, we see that the mean of the banking is greater than the mean of shopping. This shows us that regardless of cultural background, users are more likely to provide personal information in the banking scenario.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-namelink3-3-mann-whitney-test-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 3. Mann-Whitney Test &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;The Mann-Whitney Test allows you to determine if the observed difference is statistically significant without making the assumption that the values are normally distributed. You should have two independent variables and one continuous dependent variable.&lt;/p&gt;
&lt;h3 id=&#34;code-implementation-2&#34;&gt;Code Implementation&lt;/h3&gt;
&lt;p&gt;We can run the test on the same banking vs. shopping scenario.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;t, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scipy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mannwhitneyu(df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scenario&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bank&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent, df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scenario&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shop&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;t: 14795.5
p: 4.1e-05
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-namelink4-4-one-way-analysis-of-variance-anova-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 4. One-Way Analysis of Variance (ANOVA) &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;ANOVA is similar to a t-test, but it is used when there are three or more independent variables (categorical). It assumes normal distribution (use Kruskal-Wallis if abnormal?). One-way ANOVA compares the means between the variables to test whether the difference is statistically significant. However, it does not tell you which specific groups were statistically different from one another. Thus, a post-hoc analysis is required.&lt;/p&gt;
&lt;h3 id=&#34;code-implementation-3&#34;&gt;Code Implementation&lt;/h3&gt;
&lt;p&gt;The result below suggests that there is a statistical difference in the means of the three variables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# we can create a third variable, and compare the var1, var2, and var3 with one-way ANOVA&lt;/span&gt;
var3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;culture&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USA&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;percent
scipy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f_oneway(banking, shopping, var3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;F_onewayResult(statistic=11.171874914065159, pvalue=1.7072783704546878e-05)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-namelink5-5-two-way-anova-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; 5. Two-Way ANOVA &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;A two-way ANOVA can be used when you want to know how two independent variables have an interaction effect on a dependent variable. CAVEAT: a two-way ANOVA does not tell which variable is dominant.&lt;/p&gt;
&lt;h3 id=&#34;code-implementation-4&#34;&gt;Code Implementation&lt;/h3&gt;
&lt;p&gt;Below in the code, we see &lt;strong&gt;&lt;em&gt;if there is an interaction effect between culture and scenario use cases on the total amount of information provided.&lt;/em&gt;&lt;/strong&gt; For example, would Americans be more willing to provide personal information than Koreans? If so, does the use case (either banking vs. shopping) affect at all?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# we give in a string value of each variable, and the interaction variable &amp;#39;culture:scenario&amp;#39;&lt;/span&gt;

model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ols(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;percent ~ culture + scenario + culture:scenario&amp;#39;&lt;/span&gt;, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;df)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit()
sm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anova_lm(model, typ&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;From the table above, only scenario has a sole effect on the total amount of information provided (depicted as &lt;code&gt;percent&lt;/code&gt; in the dataframe). We see culture, and the interaction of culture and scenario do not have an effect on the amount of information that users provided.&lt;/p&gt;
&lt;p&gt;The finding matches with the previous t-test and graph results, where users provided more information in the banking than they would in shopping.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
  </channel>
</rss>
