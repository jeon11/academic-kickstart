[{"authors":["jin"],"categories":null,"content":"I am a UX researcher at Microsoft\u0026rsquo;s Developer Division, collaborating across multiple product teams to improve developer experience in Azure. I am simultaneously completing my master\u0026rsquo;s degree in Human Centered Design and Engineering at the University of Washington.\nI am an inquisitive, detail-oriented, data enthusiast passionate in UX research. I believe that data-driven insights are at the heart of unveiling users' underlying needs and delivering meaningful experiences.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://jinjeon.me/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a UX researcher at Microsoft\u0026rsquo;s Developer Division, collaborating across multiple product teams to improve developer experience in Azure. I am simultaneously completing my master\u0026rsquo;s degree in Human Centered Design and Engineering at the University of Washington.\nI am an inquisitive, detail-oriented, data enthusiast passionate in UX research. I believe that data-driven insights are at the heart of unveiling users' underlying needs and delivering meaningful experiences.","tags":null,"title":"Jin Jeon","type":"authors"},{"authors":null,"categories":null,"content":"Methods:Contextual inquiries, journey maps, collaborative workshop facilitation, generative research, preliminary research Timeline: June 2021 - Aug 2021 (~3 months)Stakeholders:UX manager, UX designers and researchers, dev team, PM and product team Overview  Problem Space: While SAP provided vast variety of products and software for enterprise resource planning, there was a lack of UI consistency throughout its different products. In order to deliver consistent and coherent user experience across SAP products, I collaborated with the UX framework team to establish design principles for the UX pattern library.Disclaimer: Due to NDA, the page primarily highlights the research process, decision making, reasoning and generalized outcomes.Objectives   Identify user needs and pain points when comparing data in a procurement process. Visualize users' touchpoints of typical use cases through journey mapping. Serve research findings to better inform design decisions in building comparison pattern.  Impact   Provided high-level recommendations to address major user needs and pain points to stakeholders involving UX framework team, sourcing product team, procurement organization, PM, and dev team. Set the foundation for the next step of research that involves ideation and concept testing. Established user-data driven design principles for data comparison framework. Evangelized the user research process by constantly involving stakeholders in regular meetings, user interviews, and collaborative workshops. Validated major research findings that matched with previous research.  Research Questions    \u0026lt;mark\u0026ldquo;How does typical workflow look like, and what are the needs and pain points at each touchpoint?\u0026quot;High Level Research Process     The project began with preliminary research, examining what has been done in the past. It served as a guide for designing primary user research. Through a collaborative data synthesis workshop, I was able to engage different stakeholders onboard with the key research findings and deliver recommendations.    Goals:  To first understand the product space in procurement and sourcing Use the preliminary research findings as a guide for designing preliminary research To explore what has been done in the past to avoid overlapping work  At a Glance (Intentionally not readable):    Using FigJam, I visually laid out findings from examining 5+ past research work. The white empty spaces indicated potential knowledge gaps.   Outcomes:  Identified knowledge gaps and lack of understanding of end-users because all of the past work were evaluative research focusing on specific design concepts and usability studies. Pivoted the focus of the study to establish stakeholders' better understanding of the users.  In order to inform future design decisions, the primary user research was designed to focus on foundational research to understand users' needs, behaviors, pain points, and typical use cases in their sourcing workflow.     Goals:  Identify major use cases and touchpoints in sourcing and data comparison Understand users' behaviors and pain points Develop user journey map of typical use cases  Study Design: The purpose of the study was generative to understand users' behaviors, needs, and pain points.\n 60 minutes of qualitative remotely-moderated contextual inquiries and interviews via Respondent.io Design of the study was 2 folds:  High level start to end process of sourcing Detailed step by step of data comparison process from analyzing bids to making decisions    Study Demographics at a Glance:    Participant criteria were strictly controlled to ensure that I spoke with the participants that best matches with the current users.    3.1 Data Analysis:    For the initial data analysis, notes from Excel was converted to Mural whiteboard, and was organized into high level themes. Each participant was color-coded.   3.2 Thematic Analysis and Journey Mapping:     Each sticky was broken down by corresponding themes. Visually laying out the participants' sourcing workflow from start to end helped understand the journey of each participant. I was able to identify emerging patterns, characterizing behaviors, needs, and major paint points at each touchpoint in the journey.  3.3 Collaborative Data Synthesis Workshop:     Over two days, my supervisor/mentor and I facilitated data synthesis workshops to onboard stakeholders with the research findings. In order to make the data more digestible, I made sure the data was organized and presented concisely. For every stakeholder to participate, we broke into two groups: one group discussed about the findings at high level, and the other group (which I moderated) was focused on detailed step-by-step of data comparison workflow. After group affinity diagramming, we discussed and presented emerging themes and patterns to each group.   Outcomes \u0026amp; Deliverables:  Identified three major use cases in sourcing Developed persona, user story, and journey map for each use case highlighting actions taken, pain points, quotes, and emotions at each touch point. Delivered general findings related to sourcing, and data comparison habits  Including high level objectives in sourcing and data comparison Major pain points Recommendations for each pain point to improve the experience Showcasing examples of data manipulation workflow step by step    Example of Journey Map #1 of 3 (Redacted):    Example of journey map of use case #1.Total 3 use cases were presented to the stakeholders. They highlighted the corresponding user story, key descriptions of the persona, behaviors, needs and pain points, quotes, and emotion scale.    Because of time constraints, the scope of the project was focused on the \u0026ldquo;buyer\u0026rdquo; side of the procurement process. To have a better holistic understanding of the process, \u0026ldquo;supplier\u0026rdquo; side of research needs to be done.  Lessons \u0026amp; Reflections    I learned to engage with stakeholders as early as the project planning stage.By weekly updating the stakeholders and asking for their feedback, I was able to plan and develop a research plan that addresses their needs. Moreover, facilitating a collaborative data synthesis workshop session helped better synchronize the stakeholders as a team to share key findings and results.\n  Knowledge of product domain is essential especially in the B2B space.My initial challenge was to get my head around the B2B space and procurement processes within a short period of time. Despite studying the terms, watching tutorial videos, and reading, it took time to really soak the information in. My way around the challenge was to not only study hard, but also to acknowledge that I am new to the field and asking follow-up clarifying questions during the user interviews.\n  It was fascinating to speak to users from all over the world from different industries.One major reason that I love user research is being able to speak with users and approaching a problem from users' perspectives. During the interview sessions, I was speaking to a consultant in Belgium one day and to a procurement executive in India the next day.\n  Last but not least, I had fun with amazing mentorship, rich resources, and owning the project. The lessons I learned were not limited specifically to user research, but also taught me how to navigate myself through the corporate organization and personal networking.\n  Back to top ^ ","date":1628812800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628812800,"objectID":"adea434e0ca7edf3de4bd3d242a26ab7","permalink":"https://jinjeon.me/project/sap/","publishdate":"2021-08-13T00:00:00Z","relpermalink":"/project/sap/","section":"project","summary":"Examined users' data comparison habits as an initiative to actively integrate user research into SAP's design process","tags":["highlights","generative-research","preliminary-research","contextual-inquiries","qualitative-interviews","affinity-diagrams","journey-mapping"],"title":"Generative research in procurement data comparison (NDA)","type":"project"},{"authors":null,"categories":null,"content":"Table of Contents  What is Google Cloud API? Survey Data in User Research Natural Language API Features3.1 Entity Analysis3.2 Sentiment Analysis3.3 Entity Sentiment Analysis Loading in data using Google Sheets API Dataset Data Analysis Research Question7.1 A. Health Rating by Gender7.2 B. Health Rating by Age Group7.3 C. T-test for Statistical Signifcance7.4 D. Health Rating by Age \u0026amp; Gender Group7.5 E. Iteratively Running t-test Within Each Age Group Data Visualization8.1 Characterizing Textual Data Through Wordcloud Conclusion  What is Google Cloud API?  Google Cloud Platform is a suite of cloud computing services that lets developers interact with APIs that involve data storage, data analytics, and machine learning. In this notebook, I build on to the previous notebook to call in the spreadsheets from Google Drive, and run textual data analysis using the Cloud Natural Language API and vector space models.\nNatural Language AI is an API available in Google Cloud. It uses machine learning to analyze texts through sentiment analysis and extract information about the text itself. It offers three types of models:\n Auto ML: that allows you to train your own model Natural Language API: that offers pre-trained models to quickly boot up NLP. Healthcare Natural Language AI: that is specific for medical texts.  For the sake of time scope and complexity of the project, let\u0026rsquo;s use the Natural Language API to call in a pre-trained model to analyze textual data. The demo of the model can be found online here: https://cloud.google.com/natural-language.\nSurvey Data in User Research  As a UX researcher, survey studies are essential for understanding the users because they can be quickly developed and sent out to receive a good amount of sample in a short period of time. Surveys are powerful tools to be utilized for conducting preliminary research at the discovery stage to explore the general problem space and user behaviors.\nOne of the free and efficient tools is the Google Forms. While it can automatically generate pie graphs and bar graphs to summarize the survey results, the results are often too limited. As researchers, we might be interested in learning more in depth about the data. After all, it is researchers' role to develop a keen sense to analyze the data and drive insights.\nFor instance, the screenshots below show sample summaries of what Google Form summary is capable of doing.\nBreakdown of participants' age range Participants' self perception of their health wellness The graphs above do not show any relationship between the data. To drive more meaningful insights, we would want to explore if there are any relationships between the data. For example, we would want to know how self perception of health wellness varies by different age groups. Do older people perceive themselves to be less healthy than young people do? While the ratings are subjective, the analysis itself can hint towards meaningful insights.\nObjectives I use GoogleSheets API to call in the data and analyze the survey results to visualize the relationship between data and test statistical significance. I also incorporate Natural Language API to analyze textual data collected from the survey, and visualize them through violin graphs and word cloud.\nNatural Language API Features  Before diving straight to working with data, let\u0026rsquo;s take a look at some of the features of NL API.\nSetup # Imports the Google Cloud client library import os from google.cloud import language_v1 # set environment for credentials (need to be called with every start of instance) # refer the reference tab for setting credentials os.environ[\u0026#34;GOOGLE_APPLICATION_CREDENTIALS\u0026#34;] = \u0026#34;/Users/Jin/google-cloud-sdk/natural-language-api.json\u0026#34; # Instantiates a client client = language_v1.LanguageServiceClient() # Available types: PLAIN_TEXT, HTML type_ = language_v1.Document.Type.PLAIN_TEXT encoding_type = language_v1.EncodingType.UTF8 For the scope of this project, let\u0026rsquo;s look at some specific methods that NL API offers.\n1. Entity analysis2. Sentiment analysis3. Entity Sentiment analysis\n1. Entity analysis  analyze_entities: inspects the given text for known entities (proper nouns such as public figures, landmarks, etc.), and returns information about those entities.\n# grab a random text from wikipedia text = u\u0026#34;The University of Washington is a public research university in Seattle, Washington.\\ Ana Mari Cauce is the president.\u0026#34; document = {\u0026#34;content\u0026#34;: text, \u0026#34;type_\u0026#34;: type_} response = client.analyze_entities(request = {\u0026#39;document\u0026#39;: document, \u0026#39;encoding_type\u0026#39;: encoding_type}) # Loop through entitites returned from the API for entity in response.entities: print(u\u0026#34;Entity name: {}\u0026#34;.format(entity.name)) # Get entity type, e.g. PERSON, LOCATION, ADDRESS, NUMBER, et al print(u\u0026#34;Entity type: {}\u0026#34;.format(language_v1.Entity.Type(entity.type_).name)) # Get the salience score associated with the entity in the [0, 1.0] range print(u\u0026#34;Salience score: {}\u0026#34;.format(entity.salience) + \u0026#39;\\n\u0026#39;) Entity name: University of Washington Entity type: ORGANIZATION Salience score: 0.7374827265739441 Entity name: Ana Mari Cauce Entity type: PERSON Salience score: 0.11040862649679184 Entity name: Washington Entity type: LOCATION Salience score: 0.07763731479644775 Entity name: Seattle Entity type: LOCATION Salience score: 0.07447130978107452  2. Sentiment analysis  analyze_sentiment: inspects the given text and identifies the prevailing emotional opinion within the text, especially to determine a writer\u0026rsquo;s attitude as positive, negative, or neutral.\ndef analyze_sentiment(text): \u0026#34;\u0026#34;\u0026#34; a simple function created to run sentiment analysis for a given text. Parameters ---------- text : str string of text to be analyzed Returns ------- sentiment.score: float sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). sentiment.magnitude: float a non-negative number in the [0, +inf) range, which represents the absolute \\ magnitude of sentiment regardless of score (positive or negative). \u0026#34;\u0026#34;\u0026#34; document = language_v1.Document(content=text, type_=language_v1.Document.Type.PLAIN_TEXT) # Detects the sentiment of the text sentiment = client.analyze_sentiment(request={\u0026#39;document\u0026#39;: document}).document_sentiment print(\u0026#34;Text: {}\u0026#34;.format(text)) print(\u0026#34;Sentiment: {}, {}\u0026#34;.format(sentiment.score, sentiment.magnitude)) return sentiment.score, sentiment.magnitude Let\u0026rsquo;s try feeding in some random sentences and see how sentiments come out.\n# The text to analyze text = u\u0026#34;The dish was delightfully surprising.\u0026#34; text2 = u\u0026#34;The overall experience was terrible.\u0026#34; analyze_sentiment(text) print(\u0026#39;\\n\u0026#39;) _, _ = analyze_sentiment(text2) Text: The dish was delightfully surprising. Sentiment: 0.8999999761581421, 0.8999999761581421 Text: The overall experience was terrible. Sentiment: -0.800000011920929, 0.800000011920929  3. Entity sentiment analysis  analyze_entity_sentiment: combines both entity analysis and sentiment analysis and attempts to determine the sentiment (positive or negative) expressed about entities within the text.\ndef analyze_entity_sentiment(text): \u0026#34;\u0026#34;\u0026#34; a simple function to run entity sentiment analysis for a given text. Parameters ---------- text : str string of text to be analyzed Returns ------- entity.name: str name of the entity identified entity.type.name: str type of the entity identified sentiment.score: float sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). sentiment.magnitude: float a non-negative number in the [0, +inf) range, which represents the absolute \\ magnitude of sentiment regardless of score (positive or negative). \u0026#34;\u0026#34;\u0026#34; document = {\u0026#34;content\u0026#34;: text, \u0026#34;type_\u0026#34;: type_} encoding_type = language_v1.EncodingType.UTF8 response = client.analyze_entity_sentiment(request = {\u0026#39;document\u0026#39;: document, \u0026#39;encoding_type\u0026#39;: encoding_type}) # Loop through entitites returned from the API for entity in response.entities: print(u\u0026#34;Entity name: {}\u0026#34;.format(entity.name)) # Get entity type, e.g. PERSON, LOCATION, ADDRESS, NUMBER, et al print(u\u0026#34;Entity type: {}\u0026#34;.format(language_v1.Entity.Type(entity.type_).name)) # Get the salience score associated with the entity in the [0, 1.0] range print(u\u0026#34;Salience score: {}\u0026#34;.format(entity.salience)) # Get the aggregate sentiment expressed for this entity in the provided document. sentiment = entity.sentiment print(u\u0026#34;Entity sentiment score: {}\u0026#34;.format(sentiment.score)) print(u\u0026#34;Entity sentiment magnitude: {}\u0026#34;.format(sentiment.magnitude)) print(\u0026#39;\\n\u0026#39;) return entity.name, language_v1.Entity.Type(entity.type_).name, sentiment.score, sentiment.magnitude Let\u0026rsquo;s try feeding in one neutral sentence, and a positive sentence.\ntext = u\u0026#34;The University of Washington is a public research university in Seattle, Washington.\\ The HCDE Department offers amazing opportunities to study UX and HCI.\u0026#34; _, _, _, _ = analyze_entity_sentiment(text) Entity name: University of Washington Entity type: ORGANIZATION Salience score: 0.7403186559677124 Entity sentiment score: 0.0 Entity sentiment magnitude: 0.0 Entity name: Washington Entity type: LOCATION Salience score: 0.07140954583883286 Entity sentiment score: 0.0 Entity sentiment magnitude: 0.0 Entity name: Seattle Entity type: LOCATION Salience score: 0.06301160156726837 Entity sentiment score: 0.0 Entity sentiment magnitude: 0.0 Entity name: HCDE Department Entity type: ORGANIZATION Salience score: 0.04862694814801216 Entity sentiment score: 0.8999999761581421 Entity sentiment magnitude: 0.8999999761581421 Entity name: UX Entity type: OTHER Salience score: 0.03587672486901283 Entity sentiment score: 0.699999988079071 Entity sentiment magnitude: 0.699999988079071 Entity name: HCI Entity type: OTHER Salience score: 0.025248046964406967 Entity sentiment score: 0.800000011920929 Entity sentiment magnitude: 0.800000011920929 Entity name: opportunities Entity type: OTHER Salience score: 0.015508485026657581 Entity sentiment score: 0.8999999761581421 Entity sentiment magnitude: 0.8999999761581421  From the result above, we can see that the first sentiment of the entities identified in the first sentence, such as \u0026lsquo;University of Washington\u0026rsquo; or \u0026lsquo;Seattle\u0026rsquo; has a sentiment score of 0.0 which means neutral. This makes sense because the sentence was directly pulled from Wikipedia. On the other hand, the second sentence I wrote highlights \u0026lsquo;HCDE Department\u0026rsquo; as an entity with positive sentiment score of 0.8999.\nSo what\u0026rsquo;s next? We can interchangeably use the two functions defined analyze_sentiment and analyze_entity_sentiment to identify the overall sentiment of a given text or entity if specified in the data analysis process.\n Loading in data using Google Sheets API  The following code will only run if you have your Google credential.json and token.json within the working directory.\nfrom __future__ import print_function import os.path from googleapiclient.discovery import build from google_auth_oauthlib.flow import InstalledAppFlow from google.auth.transport.requests import Request from google.oauth2.credentials import Credentials SCOPES = [\u0026#39;https://www.googleapis.com/auth/spreadsheets.readonly\u0026#39;] SPREADSHEET_ID = \u0026#39;11Den6g5nuR4B2CCUML1KrA0bEZXRpPZ7t83Ieyi7NJ4\u0026#39; # Specify which sheet or row/column of data to call in # refer to https://developers.google.com/sheets/api/guides/concepts#a1_notation for detail RANGE_NAME = \u0026#39;health_data\u0026#39; creds = Credentials.from_authorized_user_file(\u0026#39;token.json\u0026#39;, SCOPES) service = build(\u0026#39;sheets\u0026#39;, \u0026#39;v4\u0026#39;, credentials=creds) # Call the Sheets API to read in the data sheet = service.spreadsheets() result = sheet.values().get(spreadsheetId = SPREADSHEET_ID, range = RANGE_NAME).execute() values = result.get(\u0026#39;values\u0026#39;, []) # convert the sheet to pandas dataframe so we can easily manipulate the data import pandas as pd data = pd.DataFrame(values[1:], columns=values[0]) # let\u0026#39;s confirm print(type(data)) data.shape \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; (71, 27)   Dataset  From the code above, we translated the data into pandas dataframe. Using data.shape, we know that there are total 27 questions collected from 71 participants. For simplicity, I remove any data that does not prefer to disclose gender. This brings the data size to 68. Due to the extensive length and branching logic within the survey, the data becomes more textual and qualitative for questions or columns in the back. I will primarily use selected columns that are of interest.\nLet\u0026rsquo;s have a quick glance at the dataset.\n# for simplicity, let\u0026#39;s constrain the gender option to only two gender_options = [\u0026#39;Man\u0026#39;, \u0026#39;Woman\u0026#39;] data = data[data[\u0026#39;What is your gender?\u0026#39;].isin(gender_options)] print(\u0026#39;There are total \u0026#39; + str(len(data)) + \u0026#39; participants.\u0026#39;) print(\u0026#39;The survey consists of \u0026#39; + str(data.shape[1]) + \u0026#39; questions (columns in the dataframe).\u0026#39;) # convert the column string values to integers data[\u0026#39;How would you rate your health?\u0026#39;] = data[\u0026#39;How would you rate your health?\u0026#39;].astype(int) data.head(3) There are total 69 participants. The survey consists of 27 questions (columns in the dataframe).  .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }   Data Analysis  Now that we have seen the general dataframe structure, let\u0026rsquo;s explore probing the data for analysis.\nimport os import pandas as pd from collections import Counter import re import numpy as np import matplotlib.pyplot as plt import seaborn as sns from nltk.corpus import stopwords import warnings from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator import scipy from tabulate import tabulate warnings.simplefilter(action=\u0026#39;ignore\u0026#39;, category=FutureWarning) # suppress any warning sns.set_color_codes(\u0026#39;pastel\u0026#39;) # set color Querying data Before we play around with data, let\u0026rsquo;s query out the data that are of interest. This way we can manipulate the data more effectively without having to call on the entire dataset data everytime.\nThere are total 7 different age groups.\n# let\u0026#39;s divde the data by gender first females = data.loc[data[\u0026#39;What is your gender?\u0026#39;] == \u0026#39;Woman\u0026#39;] males = data.loc[data[\u0026#39;What is your gender?\u0026#39;] == \u0026#39;Man\u0026#39;] # let\u0026#39;s also create dataset divided by age group age_under18 = data.loc[data[\u0026#39;What age range are you?\u0026#39;] == \u0026#39;Under 18\u0026#39;] age_18to24 = data.loc[data[\u0026#39;What age range are you?\u0026#39;] == \u0026#39;18 - 24\u0026#39;] age_25to34 = data.loc[data[\u0026#39;What age range are you?\u0026#39;] == \u0026#39;25 - 34\u0026#39;] age_35to44 = data.loc[data[\u0026#39;What age range are you?\u0026#39;] == \u0026#39;35 - 44\u0026#39;] age_45to54 = data.loc[data[\u0026#39;What age range are you?\u0026#39;] == \u0026#39;45 - 54\u0026#39;] age_55to64 = data.loc[data[\u0026#39;What age range are you?\u0026#39;] == \u0026#39;55 - 64\u0026#39;] age_over65 = data.loc[data[\u0026#39;What age range are you?\u0026#39;] == \u0026#39;65 or older\u0026#39;] print(len(males)) print(len(females)) 31 38   Research Question   How does self-perception of health rating differ by gender and age? Participants were asked, How would you rate your health? (5 being healthy, 1 being not healthy).\nA. Health rating by gender  Let\u0026rsquo;s breakdown the data to see how self-perception of health wellness varies by gender and different age groups. In the code below, I first quary females and males from the data.\n# columns[4] is the column for health rating mean_males = np.mean(males[males.columns[4]]) mean_females = np.mean(females[females.columns[4]]) print(\u0026#34;Mean of males\u0026#39; self-health wellness: \u0026#34; + str(mean_males)) print(\u0026#34;Mean of females\u0026#39; self-health wellness: \u0026#34; + str(mean_females)) Mean of males' self-health wellness: 3.5161290322580645 Mean of females' self-health wellness: 3.4473684210526314  B. Health rating by age group  Now let\u0026rsquo;s breakdown the data to see how self-perception of health wellness varies by different age groups.\nage = data.groupby(\u0026#39;What age range are you?\u0026#39;)[\u0026#39;How would you rate your health?\u0026#39;].mean() age What age range are you? 18 - 24 3.615385 25 - 34 3.285714 35 - 44 3.500000 45 - 54 3.375000 55 - 64 3.600000 65 or older 4.000000 Under 18 3.000000 Name: How would you rate your health?, dtype: float64  Conversely, the age group 65 or older actually has the highest self-perception of wellness. The youngest group (age under 18) rated the lowest.\nC. T-test for statistical signifcance  With small samples of the two demographic groups 65 or older and Under 18, we are not sure if the difference we see here is significant. Let\u0026rsquo;s run a quick t-test to see if the difference we are seeing is statistically significant.\nt, p = scipy.stats.ttest_ind(age_over65[\u0026#39;How would you rate your health?\u0026#39;], age_under18[\u0026#39;How would you rate your health?\u0026#39;]) print(\u0026#39;t: \u0026#39; + str(t.round(4))) print(\u0026#39;p: \u0026#39; + str(p.round(4))) # the p-val should be less than 0.05 in general to assume the difference we observe is signifcant t: 2.8983 p: 0.0199  We see the p-value is 0.01 which is signifcant, which is one interesting find! So we can say that within this dataset, the people age over 65 perceive themselves to be more healthy than teenagers would do.\nD. Health rating by age \u0026amp; gender group  Now let\u0026rsquo;s breakdown by both gender and different age groups to look at how the self perception of health wellness change.\nage_gender = data.groupby([\u0026#39;What age range are you?\u0026#39;, \u0026#39;What is your gender?\u0026#39;])[\u0026#39;How would you rate your health?\u0026#39;].mean().round(2) age_gender What age range are you? What is your gender? 18 - 24 Man 3.43 Woman 3.83 25 - 34 Man 3.43 Woman 3.21 35 - 44 Man 3.80 Woman 3.29 45 - 54 Man 3.40 Woman 3.33 55 - 64 Man 3.33 Woman 4.00 65 or older Man 4.00 Woman 4.00 Under 18 Man 3.00 Woman 3.00 Name: How would you rate your health?, dtype: float64  E. Iteratively running t-test within each age group  We have several different age groups with each male and female gender group. Within each age group, let\u0026rsquo;s run a t-test to see if there are any significant observed differences.\ngender_options = [\u0026#39;Man\u0026#39;, \u0026#39;Woman\u0026#39;] age_groups = [\u0026#39;age_under18\u0026#39;, \u0026#39;age_18to24\u0026#39;, \u0026#39;age_25to34\u0026#39;, \u0026#39;age_35to44\u0026#39;, \u0026#39;age_45to54\u0026#39;, \u0026#39;age_55to64\u0026#39;, \u0026#39;age_over65\u0026#39;] table = [] table.append([\u0026#39;age group\u0026#39;, \u0026#39;t value\u0026#39;, \u0026#39;p value\u0026#39;]) # iteratively run for t-tests within each age group defined in the list variable \u0026#39;age_groups\u0026#39; for i in range(0, len(age_groups)): data_string = \u0026#34;[\u0026#39;How would you rate your health?\u0026#39;]\u0026#34; eval_string1 = age_groups[i] + \u0026#39;.loc[\u0026#39; + age_groups[i] + \u0026#34;[\u0026#39;What is your gender?\u0026#39;] == \u0026#39;Man\u0026#39;]\u0026#34; a = eval(eval_string1 + data_string) eval_string2 = age_groups[i] + \u0026#39;.loc[\u0026#39; + age_groups[i] + \u0026#34;[\u0026#39;What is your gender?\u0026#39;] == \u0026#39;Woman\u0026#39;]\u0026#34; b = eval(eval_string2 + data_string) # strings_combined = \u0026#39;scipy.stats.ttest_ind(a, b)\u0026#39; t, p = eval(\u0026#39;scipy.stats.ttest_ind(a, b)\u0026#39;) # we use a package called tabulate to print out a formatted table table.append([age_groups[i], t.round(4) ,p.round(4)]) print(tabulate(table, headers=\u0026#39;firstrow\u0026#39;)) age group t value p value ----------- --------- --------- age_under18 nan nan age_18to24 -1.1315 0.2819 age_25to34 0.4504 0.6575 age_35to44 0.9682 0.3558 age_45to54 0.1637 0.8754 age_55to64 -0.7746 0.495 age_over65 0 1  We see that the p-values are all above 0.05 which means that there are no observed significant differences in gender within each age group.\n Data Visualization  Let\u0026rsquo;s first try plotting a simple visual violin plot.\nage_plot = sns.catplot(x=\u0026#39;What age range are you?\u0026#39;, y=\u0026#39;How would you rate your health?\u0026#39;, \\ hue=\u0026#39;What is your gender?\u0026#39;, kind=\u0026#34;violin\u0026#34;, data=data); Characterizing textual data through wordcloud  Let\u0026rsquo;s change focus and try analyzing textual inputs from the participants. We will analyze the column How is your health and/or fitness information being used? question to identify any emerging keywords using the word cloud representation. Disclaimer: The result here is not such a useful or accurate representation as the stopwords did not clearly filter out.\nWe first call in a list of stopwords to filter out any unnecessary words, such as \u0026lsquo;I\u0026rsquo;, \u0026lsquo;and\u0026rsquo;, and etc. We then flatten out all the responses into a single list of words.\nIs there gender difference in how they use health data (text responses)? Participants were asked, \u0026ldquo;How is your health and/or fitness information being used?\u0026rdquo; Here, I try to breakdown the text data through representation of wordcloud, and see if there any characteristics found in each gender.\n# builtin stopword sets from nltk stop = set(stopwords.words(\u0026#39;english\u0026#39;)) def plot_wordcloud(df, col, separator=None): \u0026#34;\u0026#34;\u0026#34; Plots a wordcloud of given dataframe and specific column. The text is counted at word level. Parameters ---------- df: pandas dataframe dataframe that contains textual data col: int integer that points to the specific column with textual data separator: str (default: None) string specified to breakdown the text by. Default is empty space Returns ------- Wordcloud plot list of most common words in the dataframe \u0026#34;\u0026#34;\u0026#34; # filter out any NaNs response = [x for x in df[df.columns[col]] if x == x] # filter out any None response = [x for x in response if x != None] word_dict = [] for i in range(0, len(response)): if separator == None: word_dict.append(response[i].split()) else: word_dict.append(response[i].split(separator)) word_filtered = [] # flatten the list and lower all letter cases for sublist in word_dict: for item in sublist: word_filtered.append(item.lower()) # remove stopwords word_filtered = [x for x in word_filtered if x not in stop] word_filtered = [word.replace(\u0026#39;.\u0026#39;,\u0026#39;\u0026#39;).replace(\u0026#39;,\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#34;\u0026#39;\u0026#34;,\u0026#39;\u0026#39;) for word in word_filtered] # print most common words most_common_words = Counter(word_filtered).most_common(10) print(most_common_words) # plot wordcloud texts = \u0026#34; \u0026#34;.join(word for word in word_filtered) cloud = WordCloud(max_font_size=50, max_words=100, background_color=\u0026#34;white\u0026#34;).generate(texts) plt.imshow(cloud, interpolation=\u0026#39;bilinear\u0026#39;) # plot wordcloud for Man plot_wordcloud(males, 24) # 24 specifies the column number [('me', 2), ('adjust', 2), ('overall', 2), ('personal', 2), ('im', 2), ('its', 1), ('used', 1), ('simply', 1), ('interests', 1), ('food', 1)]  # plot wordcloud for Woman plot_wordcloud(females, 24) [('use', 4), ('see', 4), ('im', 4), ('bit', 3), ('more', 3), ('less', 3), ('food', 3), ('know', 3), ('sleep', 2), ('information', 2)]  The top image is the wordcloud of male participants and the bottom is that of female participants. We see that some words are not as meaningful and that one critical fault to this approach is that breaking down the responses into word level can misrepresent the meaning of their responses. For example, \u0026lsquo;exercise\u0026rsquo; and \u0026lsquo;not exercise\u0026rsquo; have two opposing ideas but here, it would count \u0026lsquo;not\u0026rsquo; and \u0026lsquo;exercise\u0026rsquo; as two seperate ideas.\nEven though the word counts are small, we see more \u0026lsquo;food\u0026rsquo; and \u0026lsquo;sleep\u0026rsquo; for female participants, leading to an assumption that it could be related to going on diets.\nAnalyzing categorical data using wordcloud Participants were also asked, \u0026ldquo;what actions do you take regarding your health?\u0026rdquo; with multiple choices answer selections that include\u0026hellip;\n \u0026lsquo;exercise\u0026rsquo; \u0026lsquo;take medication or health supplements\u0026rsquo; \u0026lsquo;track health or fitness\u0026rsquo; \u0026lsquo;learn more about health\u0026rsquo; \u0026lsquo;receive regular treatment at clinic\u0026rsquo; \u0026lsquo;maintain a diet\u0026rsquo; \u0026lsquo;receive mental counseling.\u0026rsquo;  plot_wordcloud(males, 3, \u0026#39;;\u0026#39;) [('exercise', 29), ('take medication and/or health supplements', 10), ('track your health and/or fitness', 9), ('learn more about your health (eg from online friends or community)', 8), ('maintain a diet', 8), ('receive regular treatment and/or consultation at clinic', 3), ('none of the above', 2)]  plot_wordcloud(females, 3, \u0026#39;;\u0026#39;) [('exercise', 30), ('take medication and/or health supplements', 27), ('track your health and/or fitness', 24), ('learn more about your health (eg from online friends or community)', 17), ('receive regular treatment and/or consultation at clinic', 17), ('maintain a diet', 16), ('receive mental counseling', 7)]  From the two results above, we see that exercise is the most common practice for keeping up health in both genders. However, we see that in general, women tend to do more activities or attempts to maintain their health e.g. by more frequently visiting a clinic or receive counseling, whereas two men responded they simply do nothing at all.\n Conclusion \u0026amp; Thoughts  Wordcloud is a fun, engaging representation of textual data. However, more caution and consideration are needed because it can also tweak how the data is represented. For example, I coded the function so that it would breakdown any sentences or phrases into word level. This means that if someone does \u0026lsquo;not exercise\u0026rsquo;, it would still count \u0026lsquo;exercise\u0026rsquo; and the end result would show \u0026lsquo;exercise\u0026rsquo; being emphasized more. While the context of exercise is present, the meaning is totally the opposite.\n References GoogleSheets API v4: https://developers.google.com/sheets/api/samples/reading\nGoogle Oauth: https://developers.google.com/identity/protocols/oauth2/service-account#python\nGoogle API Python Client: https://github.com/googleapis/google-api-python-client/blob/master/docs/oauth.md\nCredentials: https://developers.google.com/workspace/guides/create-credentials\n","date":1619827200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619827200,"objectID":"b5e4ab786bea92468a13cfdab35af554","permalink":"https://jinjeon.me/post/textual-data-analysis/","publishdate":"2021-05-01T00:00:00Z","relpermalink":"/post/textual-data-analysis/","section":"post","summary":"Analyzing textual data from Google survey to drive insights through NLP and visualization","tags":["python","quantitative-ux","machine-learning","data-visualization","statistics"],"title":"Sentiment Analysis, Textual Data Analysis, and Visualization Using Natural Language API","type":"post"},{"authors":null,"categories":null,"content":"Methods:Usability testing, AB testing, qualitative interviews, affinity mapping Timeline: Jan 2021 - March 2021 (~10 week graduate course project)Stakeholders:Apple/Google program managers, WA DOH, UW professor and research lab, designers Background: What is WA Notify?  Washington Exposure Notifications (ENX, also known as WA Notify) is a tool that works through smartphones to alert users if they may have been exposed to COVID-19. Using Bluetooth, it allows smartphones to exchange randomly generated codes without revealing any personal information. As of August of 2021, there are more than 2.31 million users.\n  If another user you\u0026rsquo;ve been near in the last two weeks tested positive for COVID-19 and added his verification code, anyone who was in close contact will receive an exposure alert.\n  If you are an iPhone user, you might have easily encountered this through your settings menu.\n  Overview  The usability study combined qualitative pre and post-task interview questions and quantitative post-task usability metrics, such as Likert scales and NPS ratings.\nBecause majority of interaction happens once receiving an alert or testing positive for COVID, the study involved hypothetical situations, where users engaged with mockups of the interface. Having WA Notify available in two different versions for each OS (iOS and Android), AB testing was used to assess the experiences for each.\nThree specific areas were assessed in the study:\n Onboarding and enabling the notification Receiving an exposure alert (hypothetical) Entering a verification code once tested positive (hypothetical)  Objectives   Understand first reactions to the app, DOH website\u0026rsquo;s information page, exposure alert, and overall user experience. Provide evidence-based suggestions to improve the interaction (not about the specific UIs). Identify the experience gaps that could be present in the different OS since there has been a significant churn rate for Android users.  Impact   The project was spotlighted in HCDE department\u0026rsquo;s website newsletter Ensured research deliverables meet the stakeholders' expectations by checking in weekly since the planning stage. Provided prioritized list of recommendations for the three areas of focus, and assessed the experience gaps between the OS to the stakeholders.  Research Questions    \u0026lt;mark\u0026ldquo;Are there any perceived differences between the iOS and Android, and the usefulness of the resources provided on the DOH website?\u0026quot;Research Process         The team initially laid out the user flow visually for each OS. The overall steps were broken down into three parts: onboarding, receiving alerts, and entering the verification code for positive COVID test results.   Tasks:  The study was broken down into 3 major tasks:  Task A: Finding the instructions, and enabling the notification  Using a DOH resource link provided, enable WA Notify on your device   Task B: Receiving an exposure alert, and deciding what actions to take next  You received a text from the DOH that you may have been exposed. What do you do now?   Task C: Receiving a text message for testing positive from COVID, and deciding what to do next  You tested positive for COVID and received a text from DOH. What do you do now?       After each task:  a confidence score rating question was assessed. probed for areas of confusion, recommendations, and how the experiences in the two flows differed if any.   Each participant was tested with both versions of the WA Notify.  One entire flow of OS was presented before presenting the other.  For example, a participant first completed the iPhone version. Then, completed the Android flow.   To avoid bias or familiarity of the OS and the phone type the participants use, the order was counterbalanced.    Target Audience:  The target audience was broadly defined as anyone who resides in WA state who has an Android or iOS device. This included people of all backgrounds, education levels, and technology literacy.  The more people who enable and use WA Notify, the more effective the system is in tracing the COVID.   For screener,  Demographics:  A total of 11 participants were tested. Age range of 18-34. During the screener, participants' information, such as phone types, whether they had previously enabled the notification, and tested for COVID, were identified.     We had even split between Android and iPhone users. For iPhone users, we see that all participants had previously enabled the notifications.   Data Analysis:    The team then took the data to do affinity mapping to search for patterns and common themes. Each participant was color-coded.    For readability, I highlight findings from Task B only. Please reach out for more information.\nTask B. Receiving an exposure alert, and deciding what to do next:    Participants were shown the exposure alert, and asked what they would do next.   Insight #1:  After receiving the alert, participants' immediate reactions were to:  Learn more about the details of the exposure.  Seeing where, when, and who, and even a map that pinpoints the possible exposure. \u0026ldquo;I would be curious where I might have been exposed \u0026hellip; like a map that pinpoints the exposure. (P1)\u0026quot; \u0026ldquo;I would be concerned. Where must have I gone? Who did I get in contact with? (P8)\u0026quot;   See resources on getting tested.  \u0026ldquo;I expected to see more directions on testing sites and resources. (P11)\u0026quot;      Insight #2:  Both flows were perceived as similar: \u0026ldquo;simple\u0026rdquo; and \u0026ldquo;straightforward.\u0026quot; Android\u0026rsquo;s landing screen was preferred because it showed a summary and possible exposure data, whereas iPhone initially shows a heavy text upfront.  \u0026quot;[Android] makes it more clear about the exposure data and what to do next. (P7)\u0026quot;   Experiences in both versions made sense to the participants. Most concerns were raised in the DOH\u0026rsquo;s \u0026lsquo;What to do Next\u0026rsquo; resource web page.  \u0026ldquo;Good until the point of clicking the link to \u0026lsquo;Learn More.\u0026rsquo; (P4)\u0026quot;       Android (left) has a summary page vs. iPhone (right) shows a heavy text upfront.   Insight #3:  Once the participants reached the page, they were asked series of questions on the overall impression and finding specific information on what to do next within the DOH\u0026rsquo;s website.     Participants had to find information on what to do next on the DOH website.   Pros:  Comprehensive of the information in the page  Cons:  Difficult to find relevant information Contents seem useful, but too generic that doesn\u0026rsquo;t meet the expectations of the users that just received the exposure alert would look for  Confidence Rating:   At the end of the task, participants were asked, \u0026ldquo;How confident do you feel on what to do next upon possible exposure?\u0026quot; (5 being most confident)\n Flow 1. iPhone settings to the DOH Website: 3: 3.5/5.0 Flow 2. Android App to the DOH Website: 3: 4.0/5.0    Confidence rating in the Android version scored highly possibly due to the better summary page that was provided. However, with our sample size, the rating should be taken as a grain of salt at the stage.\n   Based on the feedbacks provided from the participants and insights, I came up with 3 recommendations:\n  Prioritize more ACTIONABLE information\n Information, such as COVID symptoms, were considered common sense at this point \u0026ldquo;To me, it feels like it\u0026rsquo;s common knowledge, such as symptoms (P1)\u0026quot; \u0026ldquo;I expected to see more simplified summary. It\u0026rsquo;s 2021 and I already have context of COVID (P11)\u0026quot; \u0026ldquo;Guidelines seem informational. Nothing to act on. (P4)\u0026quot;    Make information about testing sites more available\n After seeing the exposure notification, most participants wanted and expected to immediately get tested, but had hard time finding the correct information Show information about nearby clinics or how to get scheduled for a test \u0026ldquo;Does it have information on testing sites? I would like to know what steps to take next. (P9)\u0026quot;    Less text and more visuals\n A lot of word and information were provided upfront while participants were going under stress from the alert Visuals or infographics can better direct them to relevant information \u0026ldquo;It feels really wordy and it\u0026rsquo;s too much all at once. (P8)\u0026quot;      Recruiting was mainly convenience sampling: More than half of the participants were affiliated with the University of Washington, which may not be fully representative of the general public of WA state.\n  The usability tasks were limited to remotely observing participants' interactions within the prototype as the tasks involved hypothetical situations, such as getting an exposure or positive test alert.\n  For the scope of the project, only limited DOH webpages were tested.\n  Have any questions? Please reach out!\nBack to top ^ ","date":1617148800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617148800,"objectID":"3b64998698fbd2feeeaf5c42a62beab5","permalink":"https://jinjeon.me/project/wa-notify/","publishdate":"2021-03-31T00:00:00Z","relpermalink":"/project/wa-notify/","section":"project","summary":"Task-based, comparative usability study on the COVID alert systems in iOS and Android","tags":["evaluative-research","usability-testing","qualitative-interviews","affinity-diagrams","ABTesting"],"title":"WA COVID Exposure Notification Usability Study","type":"project"},{"authors":null,"categories":null,"content":"I use survey data collected from Amazon Mechanical Turk and Reddit user groups (all personal data have been removed) in a study to examine the impact of cultural localization on web-based account creation between American and Korean users. I use the experiment data to display basic statistical tests in Python.\nResearch Question:  Is there a difference in providing personal information between USA and Korean Internet users within two different use scenarios: online banking and shopping?\n I use the following tests:\n Pearson Correlation Coefficient T-Test Mann-Whitney Test One-Way Analysis of Variance (ANOVA) Two-Way ANOVA  import os import pandas as pd import numpy as np import seaborn as sns import scipy from matplotlib import pyplot import matplotlib.pyplot as plt from statsmodels.formula.api import ols import statsmodels.formula.api as smf import statsmodels.api as sm from statsmodels.stats.anova import AnovaRM import pdb # for debugging import warnings warnings.simplefilter(action=\u0026#39;ignore\u0026#39;, category=FutureWarning) # set color sns.set_color_codes(\u0026#39;pastel\u0026#39;) Setup \u0026amp; Querying Data It is first critical to understand the dataframe to play around and make analysis. Usually, long-format data is desired (or at least I\u0026rsquo;m used to it) for using Python and Seaborn for data visualization. Long format is basically when each variable is represented as a column, and each observation or event is a row. Below, we read in, and query the data.\nUseful commands:  df.head(): by default, shows first five rows of df df.columns(): prints all the columns in df df.describe(): provides summary description of df pd.read_csv(data, usecols=['col1', 'col2', ...,]): can be used to filter columns  # read in data.csv file as df \u0026amp; see data structure df = pd.read_csv(\u0026#39;data.csv\u0026#39;) # query data by scenario and culture bank = df.query(\u0026#34;scenario == \u0026#39;Bank\u0026#39;\u0026#34;).copy() shop = df.query(\u0026#34;scenario == \u0026#39;Shop\u0026#39;\u0026#34;).copy() kor = df.query(\u0026#34;culture == \u0026#39;Korea\u0026#39;\u0026#34;).copy() usa = df.query(\u0026#34;culture == \u0026#39;USA\u0026#39;\u0026#34;).copy() # an example of the data structure usa.head() .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }   1. Pearson Correlation Coefficient  When we want to ask \u0026ldquo;how strongly correlated are the two variables?\u0026quot;, we can use Perason\u0026rsquo;s Correlation. It is used to measure statistical relationship or association between two continuous variables that are linearly related to each other. The coefficient value \u0026ldquo;r\u0026rdquo; ranges from -1 (negative relation) to 1 (perfectly positive). 0 would mean that there is no relationship at all.\nProperties of Pearson Correlation  The units of the values do not affect the Pearson Correlation.  i.e. Changing the unit of value from cm to inches do not affect the r value   The correlation between the two variables is symmetric:  i.e. A -\u0026gt; B is equal to B -\u0026gt; A    ** Use Spearman\u0026rsquo;s Correlation when the two variables have non-linear relationship (e.g. a curve instead of a straight line).\nCode Implementation We use scipy package to calculate the Pearson Correlation. The method will return two values: r and p value.\n# let\u0026#39;s look at the correlation of information provided by different scenarios: online banking vs. shopping # bank[\u0026#39;percent\u0026#39;] will return an array of percentage values r, p = scipy.stats.pearsonr(bank[\u0026#39;percent\u0026#39;], shop[\u0026#39;percent\u0026#39;]) print(\u0026#39;r: \u0026#39; + str(r.round(4))) print(\u0026#39;p: \u0026#39; + str(p.round(4))) r: 0.7592 p: 0.0  From the results above, we can see there is a strong positive relationship between the amount of information provided in banking and shopping. i.e. Providing information in banking would affect how a user provides personal information in shopping.\n 2. T-Test  When comparing the means of two groups, we can use a t-test. It takes into account of the means and the spread of the data to determine whether a difference between the two would occur by chance or not (determined by the p-value being less than 0.05 usually). In a t-test, there should be only two independent variables (categorical/nominal variables) and one dependent continuous variable.\nProperties of t-test   The data is assumed to be normal (If the distribution is skewed, use Mann-Whitney test).   T-test yields t and p value:2a. The higher the t, the more difference there is between the two groups. The lower the t, the more similar the two groups are.2b. T-value of 2 means the groups are twice as different from each other than they are within each other2c. The lower the p-value, the better (meaning that it is significant and the difference did not occure by chance). P-value of 0.05 means that there is 5 percent happening by chance\n  Code Implementation We use scipy package again to run a t-test. Before we decide which test to run, we can quickly plot and see the distribution like below.\nsns.distplot(df[df[\u0026#39;scenario\u0026#39;] == \u0026#39;Bank\u0026#39;].percent) \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x1c238f61d0\u0026gt;  The distribution looks relatively normal. We can run a t-test to see whether there is a difference between the total amount of information provided by the users from each use scenario: i.e. banking vs. shopping\n# we run a t-test to see whether there ia a difference in the amount of information provided in each scenario t, p = scipy.stats.ttest_ind(df[df[\u0026#39;scenario\u0026#39;] == \u0026#39;Bank\u0026#39;].percent, df[df[\u0026#39;scenario\u0026#39;] == \u0026#39;Shop\u0026#39;].percent) print(\u0026#39;t: \u0026#39; + str(t.round(4))) print(\u0026#39;p: \u0026#39; + str(p.round(6))) t: 4.8203 p: 2e-06  The result above shows that there is a significant difference in the amount of information provided between two use scenarios with t-value being high, and p-value being very small. However, we don\u0026rsquo;t actually know which scenario yields more information than the other. The t-test only tells there is a significant difference.\nTo find out, we can create a little fancy distribution plot with some box plots:\nbanking = df[df[\u0026#39;scenario\u0026#39;] == \u0026#39;Bank\u0026#39;].percent shopping = df[df[\u0026#39;scenario\u0026#39;] == \u0026#39;Shop\u0026#39;].percent # let\u0026#39;s plot box-dist plot combined f, (ax_box1, ax_box2, ax_dist) = plt.subplots(3, sharex=True, gridspec_kw= {\u0026#34;height_ratios\u0026#34;: (0.3, 0.3, 1)}) # add boxplots at the top sns.boxplot(banking, ax=ax_box1, color=\u0026#39;g\u0026#39;) sns.boxplot(shopping, ax=ax_box2, color=\u0026#39;m\u0026#39;) ax_box1.axvline(np.mean(banking), color=\u0026#39;g\u0026#39;, linestyle=\u0026#39;--\u0026#39;) ax_box2.axvline(np.mean(shopping), color=\u0026#39;m\u0026#39;, linestyle=\u0026#39;--\u0026#39;) plt.subplots_adjust(top=0.87) plt.suptitle(\u0026#39;Amount of information provided by use scenario\u0026#39;, fontsize = 17) # add distplots below sns.distplot(banking, ax=ax_dist, label=\u0026#39;Banking\u0026#39;, kde=True, rug=True, color=\u0026#39;g\u0026#39;, norm_hist=True, bins=2) sns.distplot(shopping, ax=ax_dist, label=\u0026#39;Shopping\u0026#39;, kde=True, rug=True, color=\u0026#39;m\u0026#39;, norm_hist=True, bins=2) ax_dist.axvline(np.mean(banking), color=\u0026#39;g\u0026#39;, linestyle=\u0026#39;--\u0026#39;) ax_dist.axvline(np.mean(shopping), color=\u0026#39;m\u0026#39;, linestyle=\u0026#39;--\u0026#39;) plt.legend() plt.xlabel(\u0026#39;Percentage of information\u0026#39;, fontsize=16) ax_box1.set(xlabel=\u0026#39;\u0026#39;) ax_box2.set(xlabel=\u0026#39;\u0026#39;) [Text(0.5, 0, '')]  From the graph above, we see that the mean of the banking is greater than the mean of shopping. This shows us that regardless of cultural background, users are more likely to provide personal information in the banking scenario.\n 3. Mann-Whitney Test  The Mann-Whitney Test allows you to determine if the observed difference is statistically significant without making the assumption that the values are normally distributed. You should have two independent variables and one continuous dependent variable.\nCode Implementation We can run the test on the same banking vs. shopping scenario.\nt, p = scipy.stats.mannwhitneyu(df[df[\u0026#39;scenario\u0026#39;] == \u0026#39;Bank\u0026#39;].percent, df[df[\u0026#39;scenario\u0026#39;] == \u0026#39;Shop\u0026#39;].percent) print(\u0026#39;t: \u0026#39; + str(t.round(4))) print(\u0026#39;p: \u0026#39; + str(p.round(6))) t: 14795.5 p: 4.1e-05   4. One-Way Analysis of Variance (ANOVA)  ANOVA is similar to a t-test, but it is used when there are three or more independent variables (categorical). It assumes normal distribution (use Kruskal-Wallis if abnormal?). One-way ANOVA compares the means between the variables to test whether the difference is statistically significant. However, it does not tell you which specific groups were statistically different from one another. Thus, a post-hoc analysis is required.\nCode Implementation The result below suggests that there is a statistical difference in the means of the three variables.\n# we can create a third variable, and compare the var1, var2, and var3 with one-way ANOVA var3 = df[df[\u0026#39;culture\u0026#39;] == \u0026#39;USA\u0026#39;].percent scipy.stats.f_oneway(banking, shopping, var3) F_onewayResult(statistic=11.171874914065159, pvalue=1.7072783704546878e-05)   5. Two-Way ANOVA  A two-way ANOVA can be used when you want to know how two independent variables have an interaction effect on a dependent variable. CAVEAT: a two-way ANOVA does not tell which variable is dominant.\nCode Implementation Below in the code, we see if there is an interaction effect between culture and scenario use cases on the total amount of information provided. For example, would Americans be more willing to provide personal information than Koreans? If so, does the use case (either banking vs. shopping) affect at all?\n# we give in a string value of each variable, and the interaction variable \u0026#39;culture:scenario\u0026#39; model = ols(\u0026#39;percent ~ culture + scenario + culture:scenario\u0026#39;, data=df).fit() sm.stats.anova_lm(model, typ=2) .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  Conclusion From the table above, only scenario has a sole effect on the total amount of information provided (depicted as percent in the dataframe). We see culture, and the interaction of culture and scenario do not have an effect on the amount of information that users provided.\nThe finding matches with the previous t-test and graph results, where users provided more information in the banking than they would in shopping.\n","date":1616371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616371200,"objectID":"8b986d43b9eb58d086b72ee549497f58","permalink":"https://jinjeon.me/post/quant-ux/","publishdate":"2021-03-22T00:00:00Z","relpermalink":"/post/quant-ux/","section":"post","summary":"Compares survey data to run t-test, 1-, 2-way ANOVA, and more","tags":["python","quantitative-ux","cross-cultural","statistics"],"title":"Statistical Data Analysis in Cross-Cultural Research","type":"post"},{"authors":null,"categories":null,"content":" ","date":1607558400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607558400,"objectID":"af53df25a117ed377246132f53441af8","permalink":"https://jinjeon.me/project-archives/coffitok/","publishdate":"2020-12-10T00:00:00Z","relpermalink":"/project-archives/coffitok/","section":"project-archives","summary":"From identifying user needs to iterating prototypes, a 10-week project in user centered design **(opens external project link)**","tags":["side-projects"],"title":"Coffitok (Graduate course project)","type":"project-archives"},{"authors":null,"categories":null,"content":"Methods: generative research, competitive analysis, remote qualitative interview, journey map, affinity diagramTimeline: June 2020 - Oct 2020 (~4 months)Stakeholders:Research manager, product designers, brand manager, eCommerce teamImpact   Presented four major recommendations to research managers, product and eCommerce teams. Validated research findings by discovering results that match with other ongoing research. Provided both design recommendations and strategies on how the company in the travel industry can adapt and strive during the pandemic.  Research Question     Project Timeline     The project spanned from late June to October. The study initiated with a review of company\u0026rsquo;s past research, examining the different competitors and case studies. We then proceeded with running qualitative interviews on UserTesting.com to directly speak with the customers about their travel experiences.    User Research  1. Preliminary \u0026amp; Competitive Analysis Goal:To first better understand the competitive landscape of the airline industries, we examined the websites of the six airlines to visualize the user flow of booking a flight.\n💡 Key/fun Fact:Despite the industry standard of generalizing the classification of seat types into economy, business, and first class, we noticed that each airline had different ways of classifying, naming, and promoting the different fare classes. We searched for areas that could be confusing and be improved for the users.\n   Each airline had its own ways of classifying and naming the seats. Even though the perks that came along with each fare type were quite consistent throughout, low-cost airline, such as Southwest, had a uniquely different seating plan.  Insights  Alaska Airlines' fare types were straightforward and transparent. The seat names were in consistent ascending order: i.e. saver → economy → premium → first class. Fare types and their associated perks can become very unclear:e.g. JetBlue\u0026rsquo;s first class name was \u0026ldquo;Mint\u0026rdquo; which has no association with Blue.e.g. SouthWest\u0026rsquo;s distinction between basic economy and economy was vague. United had the most visually busy interface and complex fare types, leading to a poor booking experience.  2. Qualitative Interviews Goal:To understand users':\nMethods:To capture their moment-to-moment emotions and actions, we divided the entire flight experience into 5 phases:\n3. Thematic Analysis    We explored multi-facets of the travel experience to search for emerging themes from the qualitative data we collected from interviews and journey maps.     Overview of our affinity map. We inductively searched for overarching themes by\u0026hellip;Participant journey map → airline journey map → all airline journey map. From each participant\u0026rsquo;s journey map, we combined them to characterize the overall experience of each airline. We then combined all airlines to identify any patterns.   Key Insights \u0026amp; Results  Please note that below are filtered results due to NDA.\nPersonas / Highlights Three prototypical personas were developed. The information provides basic demographic information, a hypothetical trip destination, quotes, means used to book and upgrade the seat. It also identifies top values, pain points, and motivations for upgrading a seat. Only 1 of the 3 is shown here.\n   The second persona is characterized by how traveling in the pandemic era is worst not just because of the safety concerns, but also due to the lack of services. Another unique perspective is the consideration for how family members can buy tickets for other family members.   Characterizing the Travel Experience    An overall experience of Airline X:Visualizing the travel experience through a journey map helped identify values, emotions, and user quotes at each touchpoint in the journey.   We then devised step-by-step recommendations for each travel stage (NDA).\n Recommendations   Based on the key insights and results synthesized from the data, four major recommendations were made.     The four high level recommendations  💡 Key Fact: Quantitative metrics, such as time to complete a booking, are less important than transparency. Transparency translates to expectations. When expectations are not met, the overall experience worsens. Clear communication on what each seat upgrade entails can entice users. e.g. \u0026ldquo;upgrading a seat will get you a 7-inch wider leg room\u0026rdquo;.  Design Recommendations Based on the four recommendations, additional elements in the websites were modified to deliver transparency.\n1. Show what services are suspended    Click to see in large view/ Having a devoted section that clearly communicates what services are currently suspended specifically due to COVID conveys transparency (e.g. in-flight food \u0026amp; beverages). When a user is expecting quality in-flight service but does not receive it, the experience deteriorates.   2. Clearly communicate the perks of upgrading    Click to see in large view/ Communicating what an upgraded seat entails provide transparency and facilitates the upgrading decision.    Limitations \u0026amp; Lessons Learned    The participants were not racially diverse as recruitment of participants were automatically done via UserTesting.com.\n  Majority of participants' recent travels occurred 6 months ago, in which they may have distorted memory of their travel experiences.\n  In a qualitative research, it\u0026rsquo;s more about finding about the big buckets \u0026amp; themes unlike a quant research. When presenting the different demographic groups, it can be as easy as describing \u0026ldquo;we examined a wide income group\u0026rdquo; instead of graphing out all the different income groups. If all the demographic information was graphically presented, it can convey the different stakeholders, esp. data scientists, that the results and insights will be quant focused when the research is actually qualitative.\n     With that, I end with a fun quote from one of our participants😄   Back to top ^ ","date":1601856000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601856000,"objectID":"c24341871115386f21f688709c1cda00","permalink":"https://jinjeon.me/project/alaska-airlines/","publishdate":"2020-10-05T00:00:00Z","relpermalink":"/project/alaska-airlines/","section":"project","summary":"From research planning to moderating interviews, delivered design recommendations based on research findings and user journey maps","tags":["highlights","generative-research","preliminary-research","qualitative-interviews","affinity-diagrams","journey-mapping"],"title":"Visualizing travel experiences through interactive journey mapping (Company sponsored project/ NDA)","type":"project"},{"authors":null,"categories":null,"content":"Methods: survey, interview, affinity diagram, prototyping, heuristic evaluation, usability testingTimeline: Jul 2020 - Sep 2020 (~3 months)Stakeholders: product manager, senior designer, clinicians, patientsOverview  To improve patients' experiences with symptom management and engagement with the health tracker, the team conducted user research to identify user needs, concept-tested prototypes, and delivered a high-fidelity prototype to the leaders and multiple stakeholders.\nWith COVID-19, the team was working remotely as an international, cross-functional team with each of us in different time zones. I was also flying around being in the US and my hometown Korea, making the project more dynamic.\nImpact   Delivered research findings and 4 major feature recommendations to leaders and multiple stakeholders, including CEO, product team, and designers. Evangelized the impact of research through adaptation of design framework throughout the research process. Received strong positive feedbacks from the stakeholders, and recommendations aligned with company\u0026rsquo;s future milestones.  Research Question     The Design Process  Unfolding the Research through Design Framework Part of our team\u0026rsquo;s mission was to evangelize the impact of research as the company lacked a dedicated research team. We incorporated the Double Diamond design framework to help us guide our research focus by better framing the problem and solving the users' underlying needs.\nThis case study will unfold along with the different stages of the Double Diamond.The Ideal Double Diamond    The ideal double diamond. Design frameworks help organize the design thinking process by helping researchers better frame the problem and focus on identifying and solving the users’ underlying needs.The model, divided into 4 phases (discover, define, develop, and deliver), maps the divergent and convergent stages of the design process.  but the Reality\u0026hellip;    The deformed double diamond. While the ideal model is a perfectly-shaped two diamonds, the reality of our research journey was a deformed diamond process. We made multiple pivots along the research, which ended up being a valuable process as we gained greater insights to the problem space.   User Research  Please note that below are summarized insights our team had during the user research process.\n   Click to see in large view Overall high-level research process. We began our research with a general survey. From the insights from the general survey and existing survey results from the company, we conducted interviews with cancer patients and survivors.    1. Discover  We initiated our research with a general survey sent out online (n=72) to understand the general space of health care and health trackers. It helped us identify people\u0026rsquo;s health goals and tracking habits. From the general survey results, we devised a remote moderated interview plan to better understand what it feels like to undergo cancer treatments and how they manage their symptoms. From the interview with cancer patients and survivors, affinity mapping helped us categorize their responses into various sections, such as their emotions throughout the oncology journey, how they track and manage their symptoms, interaction with the care team and caregivers, and so on.  Key Insights Interview with the patients and survivors shed light to clearly understand not just how they manage their symptoms, but empathize with their adjusted lifestyles and daily challenges.\n Through quantitative analysis of the self-reported metrics, I identified that \u0026ldquo;older people\u0026rsquo;s self perception of health level is higher than that of younger people\u0026rdquo; Cancer oncology treatments were perceived as long \u0026ldquo;journeys\u0026rdquo; even sometimes with no end. Symptom management varies by each individual, severity, and cancer types. As a researcher and designer, another design challenge was how we can deliver a solution that addresses all cancer types and patients.     Click to see large view.    2. Define Below are only partial insights synthesized.💡 Key Insight:\n  Identifying the user needs and listing out the stories in a prioritized order immensely helped the team properly guide to the next steps.\n  We synthesized potential features that would address the user needs.\n     User Stories. These are partial high-level user stories synthesized from the research.    3. Develop  💡 Key Insights:  With my background in data visualization, I was particularly fascinated in developing visual dashboards and data visualization to help patients track their symptoms.\n  One key lesson I learned was: Designing should always consider the target audience first. Excited to develop data visualization screens, I initially thought that the more diverse, interactive, and comprehensive graphs are, the better. Nevertheless, during the expert evaluation and concept-testing, I realized that the screens were simply too busy and users (particularly the old population that are less tech savvy) find the visuals to be too complicated and less informative.       Click to see in large view. Developing prototypes. We began our development with quick sketches using Google\u0026rsquo;s Crazy 8\u0026rsquo;s methodology. We used Figma to develop into a high-fidelity prototypes, which were later concept-tested in the deliver phase   3.1. Concept-testing    We conducted concept-testing with 8 users, and organized by each participant. We then categorized by themes and features.      Concept-testing helped us narrow down our scope, and focus on key 3 areas, and specifically 4 feature design recommendations.    4. Deliver(Design Recommendations) ** Disclaimer: Below displays only 2 of the total 4 final design recommendations **\nIn order to ensure that our design solutions stem to delivering the actual user needs, we explicitly stated the user needs that are being met with each design recommendation.\n** 4.1. Dashboard and Data Visualization** Personalized dashboard provides a way to effectively track users' past symptoms and even compare and predict how they would feel in the next few days.          ** 4.2. Journal** Journal feature lets users record their symptoms through various means. Considering accessibility and finger \u0026ldquo;tickling\u0026rdquo; \u0026amp; \u0026ldquo;numbness\u0026rdquo; being a common symptom of cancer, we include voice memo, photo upload, and emotion scale to faciliate their input.\n         To learn more about this project, please reach out to me!\n Reflections    Interviewing cancer patients could be overwhelming at first. I thought I needed to know all the terminologies, the process that patients go through, treatment cycles, and so on. Acknowledging that I am \u0026ldquo;learning\u0026rdquo; from them at the beginning of user sessions not only helped lighten the atmosphere but also gave patients more confidence to share their stories.\n  Always think who the users are: When I was ideating and designing features for dashboard and data visualization, my initial thought was having comprehensive data and being able to interactively manipulate the data was the best way to go. However, it turned out that I was not thinking about the patients who would be the actual users for the new features.\n   ","date":1596153600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596153600,"objectID":"84f52849ca5b6875434cb4e471eb9d08","permalink":"https://jinjeon.me/project/navigating-cancer/","publishdate":"2020-07-31T00:00:00Z","relpermalink":"/project/navigating-cancer/","section":"project","summary":"Conducted user research to identify user needs and recommended features to enhance its health tracker","tags":["highlights","generative-research","evaluative-research","preliminary-research","qualitative-interviews","affinity-diagrams","journey-mapping","usability-testing","heuristic-evaluation","data-visualization"],"title":"End-to-end design process of improving the health tracker (NDA)","type":"project"},{"authors":null,"categories":null,"content":"See related work:\n  Sentiment Analysis, Textual Data Analysis, and Visualization Using Natural Language API   Statistical Data Analysis in Cross Cultural Research   Interactive Art: Image Reconstruction using Perlin Noise (p5.js Javascript)\n  The image above uses Perlin Noise to reconstruct old classic artworks, which is useful for generating patterns. Starting from a blank screen, it creates thousands of random noises that start recovering the image. They do so by reading the color of the image coordinates. The noises diffuse by generating random polygons spreading around, filling in the gap.\n  Refresh the page to see different image creations (total 4 images).\n  Drag the mouse to draw circles on top of the noises.\n   ","date":1590883200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590883200,"objectID":"eb98cfcaf675131158c908aa4dfc1182","permalink":"https://jinjeon.me/project/data-viz/","publishdate":"2020-05-31T00:00:00Z","relpermalink":"/project/data-viz/","section":"project","summary":"Analyzing data through t-test, ANOVA, sentiment analysis and more to visualize the data","tags":["quantitative-ux","data-visualization"],"title":"Statistical data analysis \u0026 visualization","type":"project"},{"authors":null,"categories":null,"content":"    Click to see in large viewCutler RA, Jeon J, Polyn SM. Characterizing the interaction of temporal and semantic information in categorized memory search. Poster presented at: Cognitive Neuroscience Society; 2020 May 2-5; Virtual      Click to see in large viewCutler RA, Jeon J, Brown-Schmidt S, Polyn SM. Semantic and temporal structure in memory for narratives: A benefit for semantically congruent ideas. Poster presented at: Psychonomic Society; 2019 Nov 14-17; Montreal, QC    ","date":1588291200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588291200,"objectID":"cae36717217bbd3e87f6f8141763e8b9","permalink":"https://jinjeon.me/project/conference/","publishdate":"2020-05-01T00:00:00Z","relpermalink":"/project/conference/","section":"project","summary":"Posters presented at international conferences","tags":["academia","quantitative-ux","data-visualization"],"title":"Conference presentations","type":"project"},{"authors":null,"categories":null,"content":"Entropy in Neuroimaging Entropy has three interpretations (three are identical, but in different expressions \u0026amp; relations):\n1. Amount of information in an event (N of possible outcomes, or grey value in images) The larger the number of possible outcomes, the larger the information gain  Ex. Information gain from a sentence would exponentially increase with length of sentence If outcome is 1, information gain is 0 (i.e. log1 = 0)    2. Uncertainty of outcome in an event Amount of information gain with probability is inversely related to the probability that the event will take place. The information per event is weighted by the probability of the event The rarer an event, the more significance the event has When all events are likely to occur, uncertainty or entropy is maximum (ie. more possible outcomes) Most common entropy form is the Shannon\u0026rsquo;s entropy: \\begin{equation*} H = \\sum_{i} p_i log(p_i) \\end{equation*}   Entropy Example \u0026gt; In a fair coin toss, entropy is maximum. Vice versa, the more unfair the coint toss is, the more definitive the outcome is (which means lower entropy)\u0026gt; Fair coin toss: P(head) = 0.5, P(tail) = 0.5\u0026gt; Entropy = -0.5log0.5 - 0.5log0.5 = 0.150 + 0.150 = 0.300 \u0026gt;\n\u0026gt; Unfair coin toss: P(head) = 0.8, P(tail) = 0.2\u0026gt; Entropy = -0.8log0.8 - 0.2log0.2 = 0.077 + 0.140 = 0.217\n 3. Dispersion of probability distribution Shannon\u0026rsquo;s entropy can be used as a measure of dispersion of a probability distribution. It can be computed on images by looking at their dispersion of grey values Image with single intensity will have low entropy value as it contains little information. Conversely, if image with varying intesity will have higher entropy value with more information Ex. image with single sharp peak (ie. grey value condensed in small area) will have low entropy value  Mutual Information The goal of registration is to maximize mutual information or the overlaps. There are three ways of interpreting MI, in which they are identical but in different forms of expression and relation of variables.\n I(X, Y) = H(Y) - H(Y | X)   This is the most closest form of mutual information. ie. MI of X and Y is subtracting entropy of H(Y) from the conditional entropy H(Y|X) (or p(Y) given p(X): chance of grey value in B given that corresponding image in A has grey value).\n  In expression of uncertainty, MI is the amount by which uncertainty about Y changes when the amount of X containing Y is given    I(X, Y) = H(X) + H(Y) - H(X, Y)  It is the most closest form to joint entropy. H(X | Y) tells us that mutual information is greater when the joint entropy is lower. Small entropy or less dispersion would mean that information overlaps more.\n   I(X, Y) = Sum of [p(x,y) log (p(x,y) / p(x)p(y))]  This formula is analogous to Kullback-Leibler distance, which measures the distance between two distributions. It measures the dependence of the two images by calculating the distance between the joint distribution of the image\u0026rsquo;s grey values p(x,y) and the joint distribution in case of independence of the two images p(x)p(y) We will use this formula to measure MI later in the code    Code Implementation Now let\u0026rsquo;s try using Python to measure mutual information of given images. We will be mainly comparing in two ways: comparing the identical images, and two different images.\n1. Let\u0026rsquo;s begin with a setup, and direct the image files from __future__ import division import numpy as np import matplotlib.pyplot as plt import os import nibabel as nib # set gray colormap and nearest neighbor interpolation by default plt.rcParams[\u0026#39;image.cmap\u0026#39;] = \u0026#39;gray\u0026#39; plt.rcParams[\u0026#39;image.interpolation\u0026#39;] = \u0026#39;nearest\u0026#39; # set the images os.chdir(\u0026#39;/Users/Jin/Documents/MATLAB\u0026#39;) img1 = \u0026#39;4_23_Drake.nii\u0026#39; img2 = \u0026#39;4_24_Denzel_Washington.nii\u0026#39; 2. Let\u0026rsquo;s slice the image and set side by side to display def get_img_slice(img, size=50): \u0026#34;\u0026#34;\u0026#34; load the image using nibabel and slice the image by given size Parameters ---------- img: nii image data read via nibabel Returns ------- numpy memmap: ndarray of image slice \u0026#34;\u0026#34;\u0026#34; img_data = nib.load(img) img_data = img_data.get_data() img_slice = img_data[:, :, size] # 50 is arbitrary here # convert any nans to 0s img_nans = np.isnan(img_slice) img_slice[img_nans] = 0 return img_slice img1_slice = get_img_slice(img1) img2_slice = get_img_slice(img2) # display images left and right def plot_raw(img1, img2): plt.imshow(np.hstack((img1, img2))) plt.show() plot_raw(img1_slice, img1_slice) 3. Let\u0026rsquo;s plot a 1d histogram for each of the two iamges def plot_hist1d(img1, img2, bins=20): \u0026#34;\u0026#34;\u0026#34; one dimensional histogram of the slices Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel bins: optional (default=20) bin size of the histogram Returns ------- histogram comparing two images side by side \u0026#34;\u0026#34;\u0026#34; fig, axes = plt.subplots(1, 2) axes[0].hist(img1.ravel(), bins) axes[0].set_title(\u0026#39;Img1 histogram\u0026#39;) axes[1].hist(img2.ravel(), bins) axes[1].set_title(\u0026#39;Img2 histogram\u0026#39;) plt.show() plot_hist1d(img1_slice, img2_slice) 4. Let\u0026rsquo;s plot the two images against each other on a scatter plot, and calculate correlation coefficient def plot_scatter2d(img1, img2): \u0026#34;\u0026#34;\u0026#34; plot the two image\u0026#39;s histogram against each other Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel Returns ------- 2d plotting of the two images and correlation coeeficient \u0026#34;\u0026#34;\u0026#34; corr = np.corrcoef(img1.ravel(), img2.ravel())[0, 1] plt.plot(img1.ravel(), img2.ravel(), \u0026#39;.\u0026#39;) plt.xlabel(\u0026#39;Img1 signal\u0026#39;) plt.ylabel(\u0026#39;Img2 signal\u0026#39;) plt.title(\u0026#39;Img1 vs Img2 signal cc=\u0026#39; + str(corr)) plt.show() # this one is comparing two identical images so it should equal 1 plot_scatter2d(img1_slice, img1_slice) # image 1 vs image 2 plot_scatter2d(img1_slice, img2_slice) Feature Space Using MI as a registration measure, we plot a feature space (or joint histogram), a two-dimensional plot showing the combinations of grey values in each of the two images for all corresponding points. For example, for each corresponding point (x, y), in which x and y are coordinates of first and second images respectively,\nAs the alignment of the two images change, the feature space changes. The more correctly registered the two images are, the more anatomical structures will overlap, showing clusters for the grey values. When the images are misaligned, the intensity of the clusters for certain structures will decrease, and a new pair of (x, y) will be matched as the image gets incorrectly aligned with other nearby structures of the other image. This is be shown as the dispersion of the clustering.\n5. Let\u0026rsquo;s plot a joint histogram now def plot_joint_histogram(img1, img2, bins=20, log=True): \u0026#34;\u0026#34;\u0026#34; plot feature space. Given two images, the feature space is constructed by counting the number of times a combination of grey values occur Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel bins: optional (default=20) bin size of the histogram log: boolean (default=True) keeping it true will show a better contrasted image Returns ------- joint histogram feature space of the two images in graph \u0026#34;\u0026#34;\u0026#34; hist_2d, x_edges, y_edges = np.histogram2d(img1.ravel(), img2.ravel(), bins) # transpose to put the T1 bins on the horizontal axis and use \u0026#39;lower\u0026#39; to put 0, 0 at the bottom of the plot if not log: plt.imshow(hist_2d.T, origin=\u0026#39;lower\u0026#39;) plt.xlabel(\u0026#39;Img1 signal bin\u0026#39;) plt.ylabel(\u0026#39;Img2 signal bin\u0026#39;) # log the values to reduce the bins with large values hist_2d_log = np.zeros(hist_2d.shape) non_zeros = hist_2d != 0 hist_2d_log[non_zeros] = np.log(hist_2d[non_zeros]) plt.imshow(hist_2d_log.T, origin=\u0026#39;lower\u0026#39;) plt.xlabel(\u0026#39;Img1 signal bin\u0026#39;) plt.ylabel(\u0026#39;Img2 signal bin\u0026#39;) # this should print a linear graph as it\u0026#39;s comparing it to itself print(plot_joint_histogram(img1_slice, img1_slice)) None  # compare images 1 and 2 print(plot_joint_histogram(img1_slice, img2_slice)) None  6. Let\u0026rsquo;s calculate the mutual information of the two images now. We use the third formula stated above to measure the overlaps of the two images. The goal of registration is to maximize mutual information or the overlaps.\ndef mutual_information(img1, img2, bins=20): \u0026#34;\u0026#34;\u0026#34; measure the mutual information of the given two images Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel bins: optional (default=20) bin size of the histogram Returns ------- calculated mutual information: float \u0026#34;\u0026#34;\u0026#34; hist_2d, x_edges, y_edges = np.histogram2d(img1.ravel(), img2.ravel(), bins) # convert bins counts to probability values pxy = hist_2d / float(np.sum(hist_2d)) px = np.sum(pxy, axis=1) # marginal x over y py = np.sum(pxy, axis=0) # marginal y over x px_py = px[:, None] * py[None, :] # broadcast to multiply marginals # now we can do the calculation using the pxy, px_py 2D arrays nonzeros = pxy \u0026gt; 0 # filer out the zero values return np.sum(pxy[nonzeros] * np.log(pxy[nonzeros] / px_py[nonzeros])) # the MI value of the first should be greater than the second as the first is comparing the image to itself print(mutual_information(img1_slice, img1_slice)) print(mutual_information(img1_slice, img2_slice)) 1.1967155090861803 0.20578049748917815  Calculating the Grand Average of Mutual Information The codes above are detailed step-by-step processes. We can condense the codes above into one useful function that will allow us to examine the overall average of mutual information of each every scan image to the register image.\nFor example, given a register type (\u0026lsquo;rtf\u0026rsquo; for register to first image, or \u0026lsquo;rtm\u0026rsquo; for register to mean), it will calculate each scan to the register image, calculate the MI, and return the grand average MI value.\nNote: The code is currently based on ACCRE system so the paths directing to the images must be changed for flexible use. The path should direct to the folder which holds all the scan images, and since it requires gigabytes of data, I had to implement the code on ACCRE-use only.\ndef get_avg_mi(subjID, type=\u0026#39;rtf\u0026#39;, saveText=False, verbose=False, nScans=187): \u0026#34;\u0026#34;\u0026#34; calculates the correlation coefficient and mutual information of the registered image to the rest of image files, and returns the grand average and trial averages Parameters ---------- subjID : str string of subject data (ie. \u0026#39;cdcatmr011\u0026#39;) type : str {\u0026#39;rtf\u0026#39;, \u0026#39;rtm\u0026#39;} registration type that would either register to first scan image or the mean image (default: \u0026#39;rtf\u0026#39;) saveText : boolean if True, will save the table report to a separate text file (default: False) verbose : boolean if True, will print out which scan file is being worked on (default: False) nScans : int integer of how many scans to expect per each run (default: 187) Returns ------- cc_all: list list of all correlation coefficient values mi_all: list list of all mutual information values \u0026#34;\u0026#34;\u0026#34; saveText = False subj = str(subjID) baseDir = \u0026#39;/scratch/polynlab/fmri/cdcatmr/\u0026#39; funcDir = baseDir + subj + \u0026#39;/images/func\u0026#39; tag = \u0026#39;func\u0026#39; if type == \u0026#39;rtf\u0026#39;: # register to first sourceImg = \u0026#39;/func1/func1_00001.nii\u0026#39; # [rmeanfunc1_00001.nii, meanfunc1_00001.nii] # tag = \u0026#39;func\u0026#39; elif type == \u0026#39;rtm\u0026#39;: # register to mean sourceImg = \u0026#39;/func1/meanfunc1_00001.nii\u0026#39; # tag = \u0026#39;rfunc\u0026#39; resDir = \u0026#39;/home/jeonj1/proj/mi\u0026#39; os.chdir(funcDir) funcs = os.listdir(funcDir) funcs.sort() # funcs = [\u0026#39;func1\u0026#39;, \u0026#39;func2\u0026#39;, ... \u0026#39;func7\u0026#39;, \u0026#39;func8\u0026#39;] meanImg = mi.get_img_slice(funcDir + sourceImg, verbose=verbose) mi_listVar = [] cc_listVar = [] # loop by each functional run for i in range(0, len(funcs)): curr_func = funcs[i] # let\u0026#39;s first create list variables for each functional run temp = \u0026#39;\u0026#39; temp = \u0026#39;mi_\u0026#39; + curr_func + \u0026#39; = []\u0026#39; exec(temp) mi_listVar.append(\u0026#39;mi_\u0026#39; + curr_func) temp = \u0026#39;\u0026#39; temp = \u0026#39;cc_\u0026#39; + curr_func + \u0026#39; = []\u0026#39; exec(temp) cc_listVar.append(\u0026#39;cc_\u0026#39; + curr_func) # now let\u0026#39;s read in each functional run folder cfuncDir = funcDir + \u0026#39;/\u0026#39; + curr_func os.chdir(cfuncDir) nii_files = os.listdir(cfuncDir) nii_files = [x for x in nii_files if x.startswith(tag) and x.endswith(\u0026#39;nii\u0026#39;)] nii_files.sort() # sanity check: count scan files assert len(nii_files) == nScans, \u0026#34;total scan files found do not match \u0026#34; + str(nScans) + \u0026#34; for func run \u0026#34; + str(i+1) # loop by each scan within run for j in range(0, nScans): if verbose: print(\u0026#39;starting \u0026#39; + curr_func + \u0026#39; | scan \u0026#39; + str(j+1)) curr_nii = mi.get_img_slice(nii_files[j], verbose=verbose) corr = mi.get_core(meanImg, curr_nii) mutual_info = mi.mutual_information(meanImg, curr_nii) # append each list temp_cc = \u0026#39;cc_\u0026#39; + curr_func + \u0026#39;.append(corr)\u0026#39; exec(temp_cc) temp_mi = \u0026#39;mi_\u0026#39; + curr_func + \u0026#39;.append(mutual_info)\u0026#39; exec(temp_mi) cc_sums = [] mi_sums = [] for r in range(0, len(funcs)): cc_sums.append(sum(eval(cc_listVar[r]))) mi_sums.append(sum(eval(mi_listVar[r]))) # get all entries in a single list cc_all = [] mi_all = [] for r in range(0, len(funcs)): cc_all = cc_all + eval(cc_listVar[r]) mi_all = mi_all + eval(mi_listVar[r]) reports = [] reports.append([\u0026#39;avg cc\u0026#39;, sum(cc_sums)/(nScans*len(funcs))]) reports.append([\u0026#39;avg mi\u0026#39;, sum(mi_sums)/(nScans*len(funcs))]) reports.append([\u0026#39;cc by runs\u0026#39;, \u0026#39;-----\u0026#39;]) for l in cc_listVar: reports.append([l, sum(eval(l))/nScans]) reports.append([\u0026#39;mi by runs\u0026#39;, \u0026#39;-----\u0026#39;]) for l in mi_listVar: reports.append([l, sum(eval(l))/nScans]) print(tabulate(reports)) if saveText: with open(resDir + \u0026#39;/\u0026#39; + subj + \u0026#39;_mi_\u0026#39; + os.path.basename(sourceImg) + \u0026#39;.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: for item in reports: f.write(\u0026#34;%s\\n\u0026#34; % item) print(\u0026#39;saved the table report to \u0026#39; + resDir) return cc_all, mi_all T-test and Plotting We can use the function get_avg_mi above to calculate the grand average. Then we will run a t-test on the two averages and plot the differences for visual reference. The script below is currently somewhat hard coded for simplicity sake.\nnScans = 187 nRuns = 8 # we use the get_avg_mi function stated above. Specify the subject and register type. cc1, mi1 = get_avg_mi(\u0026#39;cdcatmr066\u0026#39;, \u0026#39;rtf\u0026#39;, verbose=True) # register to first scan cc2, mi2 = get_avg_mi(\u0026#39;cdcatmr066\u0026#39;, \u0026#39;rtm\u0026#39;, verbose=True) # register to mean assert len(cc1) == len(cc2) == nScans * nRuns assert len(mi1) == len(mi2) == nScans * nRuns cc_t, cc_p = stats.ttest_ind(cc1, cc2) mi_t, mi_p = stats.ttest_ind(mi1, mi2) import numpy as np import seaborn as sns import matplotlib.pyplot as plt # switch matplotlib backend so that it knows it won\u0026#39;t print anything. plt.switch_backend(\u0026#39;agg\u0026#39;) # sns.set(color_codes=True) sns.set_color_codes(\u0026#39;pastel\u0026#39;) # sns.set_palette(\u0026#34;tab10\u0026#34;) plt.figure(0) sns.distplot(cc1, label=\u0026#39;rtf\u0026#39;); sns.distplot(cc2, label=\u0026#39;rtm\u0026#39;); plt.legend() plt.title(\u0026#39;correlation coefficient n=\u0026#39; + str(len(cc1))) plt.savefig(\u0026#39;/home/jeonj1/proj/mi/cc_distplot.png\u0026#39;) plt.figure(1) sns.distplot(mi1, label=\u0026#39;rtf\u0026#39;); sns.distplot(mi2, label=\u0026#39;rtm\u0026#39;); plt.legend() plt.title(\u0026#39;mutual info | n=\u0026#39; + str(len(mi1))) plt.savefig(\u0026#39;/home/jeonj1/proj/mi/mi_distplot.png\u0026#39;) # let\u0026#39;s plot box-dist plot combined f, (ax_box1, ax_box2, ax_dist) = plt.subplots(3, sharex=True, gridspec_kw= {\u0026#34;height_ratios\u0026#34;: (0.3, 0.3, 1)}) cc1_mean = np.mean(cc1) cc2_mean = np.mean(cc2) sns.boxplot(cc1, ax=ax_box1, color=\u0026#39;b\u0026#39;) sns.boxplot(cc2, ax=ax_box2, color=\u0026#39;r\u0026#39;) ax_box1.axvline(cc1_mean, color=\u0026#39;g\u0026#39;, linestyle=\u0026#39;--\u0026#39;) ax_box2.axvline(cc2_mean, color=\u0026#39;m\u0026#39;, linestyle=\u0026#39;--\u0026#39;) plt.subplots_adjust(top=0.87) plt.suptitle(\u0026#39;correlation coefficient n=\u0026#39; + str(len(cc1)), fontsize = 16) sns.distplot(cc1, ax=ax_dist, label=\u0026#39;rtf\u0026#39;, color=\u0026#39;b\u0026#39;, norm_hist=True) sns.distplot(cc2, ax=ax_dist, label=\u0026#39;rtm\u0026#39;, color=\u0026#39;r\u0026#39;, norm_hist=True) ax_dist.axvline(cc1_mean, color=\u0026#39;g\u0026#39;, linestyle=\u0026#39;--\u0026#39;) ax_dist.axvline(cc2_mean, color=\u0026#39;m\u0026#39;, linestyle=\u0026#39;--\u0026#39;) plt.legend() ax_box1.set(xlabel=\u0026#39;\u0026#39;) ax_box2.set(xlabel=\u0026#39;\u0026#39;) plt.savefig(\u0026#39;/home/jeonj1/proj/mi/cc_box_distplot.png\u0026#39;) # let\u0026#39;s plot box-dist plot combined f, (ax_box1, ax_box2, ax_dist) = plt.subplots(3, sharex=True, gridspec_kw= {\u0026#34;height_ratios\u0026#34;: (0.3, 0.3, 1)}) mi1_mean = np.mean(mi1) mi2_mean = np.mean(mi2) sns.boxplot(mi1, ax=ax_box1, color=\u0026#39;b\u0026#39;) sns.boxplot(mi2, ax=ax_box2, color=\u0026#39;r\u0026#39;) ax_box1.axvline(mi1_mean, color=\u0026#39;g\u0026#39;, linestyle=\u0026#39;--\u0026#39;) ax_box2.axvline(mi2_mean, color=\u0026#39;m\u0026#39;, linestyle=\u0026#39;--\u0026#39;) plt.subplots_adjust(top=0.87) plt.suptitle(\u0026#39;mutual information n=\u0026#39; + str(len(cc1)), fontsize = 16) sns.distplot(mi1, ax=ax_dist, label=\u0026#39;rtf\u0026#39;, color=\u0026#39;b\u0026#39;, norm_hist=True) sns.distplot(mi2, ax=ax_dist, label=\u0026#39;rtm\u0026#39;, color=\u0026#39;r\u0026#39;, norm_hist=True) ax_dist.axvline(mi1_mean, color=\u0026#39;g\u0026#39;, linestyle=\u0026#39;--\u0026#39;) ax_dist.axvline(mi2_mean, color=\u0026#39;m\u0026#39;, linestyle=\u0026#39;--\u0026#39;) plt.legend() ax_box1.set(xlabel=\u0026#39;\u0026#39;) ax_box2.set(xlabel=\u0026#39;\u0026#39;) plt.savefig(\u0026#39;/home/jeonj1/proj/mi/mi_box_distplot.png\u0026#39;) The following code above will generate two joint plots that combine the box plot and distribution plot for correlation coefficient and mutual information. The first image below shows the correlation coefficient distribution (note that the max is at 1.00). The N here represents the total number of scan images that were compared.\nThe image below is what we\u0026rsquo;re really interested in (!The title should be changed to MI!). You can see the values range from 0.6~1.4. Also, it shows evidence that RTF version has outliers depicted in the box plot, but the outlier is moderated with the RTM method.\nReferences \u0026amp; Useful Links https://people.csail.mit.edu/fisher/publications/papers/tsai99.pdf\nhttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.87.2130\u0026amp;rep=rep1\u0026amp;type=pdf\nhttps://matthew-brett.github.io/teaching/mutual_information.html#t1-t2-scatter\n","date":1580428800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580428800,"objectID":"07e51c17ae840c1cb8f4003f630747d1","permalink":"https://jinjeon.me/post/mutual-info/","publishdate":"2020-01-31T00:00:00Z","relpermalink":"/post/mutual-info/","section":"post","summary":"Using mutual information to compare and plot the different registration types in neuroimaging data preprocessing steps","tags":["python"],"title":"Information Theory: Mutual Information","type":"post"},{"authors":null,"categories":null,"content":"In prep for fMRI neuroimaging processing and building classifier\n","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543622400,"objectID":"30cf78ac05b9101ec976d37e824abf14","permalink":"https://jinjeon.me/project-archives/fmri/","publishdate":"2018-12-01T00:00:00Z","relpermalink":"/project-archives/fmri/","section":"project-archives","summary":"Click to see my brain in .gif for now 🧠","tags":null,"title":"fMRI Neuroimaging \u0026 Classifier Coming Soon...","type":"project-archives"},{"authors":null,"categories":null,"content":"See full repo at https://github.com/jeon11/use-glove-narrative.git Note: The results are shown in the poster\nOverview Google\u0026rsquo;s Universal Sentence Encoder (USE) provides 512-dimension vectors for each input that are pre-trained on large corpus, and can be plugged into a variety of different task models, such as sentiment analysis, classification, and etc. It is speed-efficient without losing task accuracy, and also provides embeddings not just for word level, but also for phrases, sentences, and even paragraphs. However, the more the words are given as input, the more likely each word meaning gets diluted.\nThis notebook is based on the Semantic Similarity with TF-Hub Universal Encoder tutorial, but uses a separate input from one of the projects. We will also use GloVe vectors to compare how the vectors and cosine similarity differ between the two models.\n  First, the notebook goes over setting up locally and use one sample data to create embeddings saved out as a separate csv file using Pandas.\n  Then assuming you have cloned the repository, we call in custom functions to quickly extract vectors of given word, phrase, sentences in USE and GloVe.\n  Table of Contents/Short-cuts:  About USE Models and Deep Average Network Installation \u0026amp; Setup Path Setup Raw Data Format Get USE Embeddings Cosine Similarity Cosine Similarity Examples Plotting Similarity Matrix  About USE Models and Deep Average Network There are two types of models in USE: Transformer and Deep Averaging Network (DAN). We will use DAN which is a lighter version for efficiency and speed in exchange for reduced accuracy (still accurate enough).\nDAN first averages the input word embeddings to create a sentence embedding. It uses PTB tokenizer, which divides a sentence into a sequence of tokens based on set of rules on how to process punctuation, articles, etc, in order to create 512 dimension embeddings. This averaged 512 vector is passed to one or more feedforward layers. Then it is multi-task-trained on unsupervised data drawn from various internet sources, Wikipedia, Stanford Natural Language Inference corpus, web news, and forums.\n Training goals:  Uses skip-thought-like model that predicts the surrounding sentences of a given text (see below) Conversational response suggestion Classification task on supervised data    The intuition behind deep feedforward neural network is that each layer learns a more abstract representation of the input than the previous one. So its depth allows to capture subtle variations of the input with more depths. Also, each layer only involves a single matrix multiplication, allowing minimal computing time.\nSee full USE paper: https://arxiv.org/pdf/1803.11175.pdf See full DAN paper: https://people.cs.umass.edu/~miyyer/pubs/2015_acl_dan.pdf\n Installation \u0026amp; Setup I used Anaconda to create a TensorFlow-specific environment to customize the package versions. After installing Anaconda\u0026hellip;\n Creating a new environment:  conda create -n py3 python=3.6.8  Activate the created environment by conda activate py3\n  Using pip, install packages for pandas, numpy, seaborn, tensorflow, tensorflow_hub. ie. pip install pckge-name\n  Then, let\u0026rsquo;s make sure to set the packages to exact version:\n  pip install --upgrade tensorflow=1.15.0 pip install --upgrade tensorflow-hub=0.7.0 Once the steps are done, we should be able to run the codes locally.\n from absl import logging import tensorflow as tf import tensorflow_hub as hub import matplotlib.pyplot as plt import numpy as np import os import pandas as pd from glob import glob import re import seaborn as sns Note: due to some depecrated methods and changes made with the tf version upgrade from tf1.X to tf2.0, here we use a specific set of Python and tf versions. You can check via pip freeze\n tested on python == 3.6.8 | tensorflow == 1.15.0 | tensorflow_hub == 0.7.0  Or you can check the version in Python via:\nimport sys print(sys.version_info) # sys.version_info(major=3, minor=6, micro=8, releaselevel=\u0026#39;final\u0026#39;) print(tf.__version__) # \u0026#39;1.15.0\u0026#39; print(hub.__version__) # \u0026#39;0.7.0\u0026#39; # script variables # for lite/DAN version: module_url = \u0026#34;https://tfhub.dev/google/universal-sentence-encoder/2\u0026#34; # for heavy/Transformer version: # module_url = \u0026#34;https://tfhub.dev/google/universal-sentence-encoder-large/3\u0026#34; baseDir = \u0026#39;use-glove-narrative\u0026#39; # repository/base folder name embedding_size = 512 # base 512-dimension embedding  Path Setup Assuming that you git cloned the project (which is for demo purposes) to your local directory, we set the path so the code knows where to look for certain data files using the baseDir specified above. We will mainly just work within the cloned folder.\npwd = os.getcwd() # recursively find absolute path while os.path.basename(pwd) != baseDir: os.chdir(\u0026#39;..\u0026#39;) pwd = os.getcwd() baseDir = pwd dataDir = baseDir + \u0026#39;/data\u0026#39; # recursively find all csv files. We will work with one file here all_csvs = [y for x in os.walk(dataDir) for y in glob(os.path.join(x[0], \u0026#39;*.csv\u0026#39;))] all_csvs.sort() all_csvs = all_csvs[0] # we will just use one sample data Raw Data Format To briefly show the data, the data is comprised of numerous idea units, or phrases of words with unique meanings. Here, we are only interested in the \u0026lsquo;text\u0026rsquo; column and \u0026lsquo;index\u0026rsquo; column. We will call in the text of the entire story to create embeddings for each idea unit. Below the example print out, we will loop over each story to create embeddings. Since we will use one story this time, it shouldn\u0026rsquo;t take that long.\n# an example print of data format datafile = pd.read_csv(all_csvs) datafile.head() .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }   Get USE Embeddings # let\u0026#39;s read in the data file textfile = pd.read_csv(all_csvs) # get the title of the narrative story, cutting out the .csv extension title = os.path.basename(all_csvs)[:-4] # create df to save out at the end vector_df_columns = [\u0026#39;paragraph\u0026#39;, \u0026#39;index\u0026#39;, \u0026#39;text\u0026#39;, \u0026#39;size\u0026#39;] # create column for each dimension (out of 512) for i in range(1, embedding_size + 1): vector_df_columns.append(\u0026#39;dim\u0026#39; + str(i)) vector_df = pd.DataFrame(columns=vector_df_columns) # import the Universal Sentence Encoder\u0026#39;s TF Hub module embed = hub.Module(module_url) # hub.load(module_url) for tf==2.0.0 # we call in the text column from data file messages = [] for t in range(0, len(textfile)): messages.append(textfile.iloc[t][\u0026#39;text\u0026#39;]) # Reduce logging output. logging.set_verbosity(logging.ERROR) with tf.compat.v1.Session() as session: session.run([tf.compat.v1.global_variables_initializer(), tf.compat.v1.tables_initializer()]) message_embeddings = session.run(embed(messages)) # make sure all units are there/sanity check assert len(message_embeddings) == len(textfile) == len(messages) # loop over each vector value to corresponding text for e in range(0, len(message_embeddings)): vector_df.at[e, \u0026#39;paragraph\u0026#39;] = textfile.iloc[e][\u0026#39;paragraph\u0026#39;] vector_df.at[e, \u0026#39;index\u0026#39;] = textfile.iloc[e][\u0026#39;index\u0026#39;] vector_df.at[e, \u0026#39;text\u0026#39;] = messages[e] vector_df.at[e, \u0026#39;size\u0026#39;] = len(message_embeddings[e]) for dim in range(0, len(message_embeddings[e])): vector_df.at[e, \u0026#39;dim\u0026#39;+str(dim+1)] = message_embeddings[e][dim] # display sample format vector_df.head() INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore  .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  print(np.shape(vector_df)) (0, 516)  The sample data shows each idea unit/text converted to 512 dimension vectors. np.shape(vector_df) will return a 41 total idea units/phrases to 516 columns (512 dimensions + custom columns (paragraph info, index, text, and size)). We then use these vectors to explore semantic similarity between text and phrases.\n# run the code below to save out as csv file vector_df.reindex(columns=vector_df_columns) vector_df.to_csv(title + \u0026#39;_vectors.csv\u0026#39;, index=False)  Cosine Similarity As a brief description, cosine similarity is basically the measure of cosine angle between the two vectors. Since we have USE and GloVe vectors that represent words into multidimensional vectors, we can apply these vector values to calculate how similar the two words are.\nIt can be easily calculated in Python with its useful packages:\ncos_sim = numpy.dot(vector1, vector2)/(numpy.linalg.norm(vector1) * numpy.linalg.norm(vector2)) Assuming we established some basic understanding, let\u0026rsquo;s call in the functions I made so that we can easily get USE and GloVe vectors at multiple word level.\nI will highlight some of the functions below:\nfrom get_glove_use import * help(glove_vec) help(use_vec) Help on function glove_vec in module get_glove_use: glove_vec(item1, item2) get vectors for given two words and calculate cosine similarity Parameters ---------- item1 : str string in glove word pool vector to compare item2 : str string in glove word pool vector to compare Returns ------- item1_vector : array item1 GloVe vector item2_vector : array item2 GloVe vector cos_sim : float cosine similarity of item1 and item2 vectors Help on function use_vec in module get_glove_use: use_vec(item1, item2) get USE vectors and cosine similairty of the two items Parameters ---------- item1 : str, list any word to compare, put in string for more than one word item2 : str, list any word to compare, put in string for more than one word Returns ------- item1_vector : array item1 USE vector item2_vector : array item2 USE vector cos_sim : float cosine similarity of item1 and item2 vectors  Cosine Similarity Example Using the two functions above, and another function compare_word_vec (which basically uses the two functions), we can easily obtain cosine similarity of two words.\n# using the two functions above, we can get # GloVe and USE vectors and cosine similarity of two input words os.chdir(gloveDir) _, _, glove_sim = glove_vec(\u0026#39;fish\u0026#39;,\u0026#39;bear\u0026#39;) _, _, use_sim = use_vec(\u0026#39;fish\u0026#39;,\u0026#39;bear\u0026#39;) print(\u0026#39;use cos: \u0026#39; + str(use_sim)) print(\u0026#39;glove cos: \u0026#39; + str(glove_sim)) INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore 0.11964830574261577 0.5305143  # the two functions glove_vex and use_vec are use in compare_word_vec compare_word_vec(\u0026#39;man\u0026#39;,\u0026#39;fish\u0026#39;) INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore use cos: 0.49838725 glove cos: 0.18601566881803455  Note: From the example above, USE and GloVe similarly identy fish to be somewhat equally similar to bear and man (but just in different scale/degree).\nNow let\u0026rsquo;s try comparing at multiple words or phrase level. We will use new functions and give in new inputs as strings.\nsentence1 = [\u0026#39;old\u0026#39;, \u0026#39;man\u0026#39;, \u0026#39;caught\u0026#39;, \u0026#39;fish\u0026#39;] sentence2 = [\u0026#39;bear\u0026#39;, \u0026#39;hunted\u0026#39;, \u0026#39;trout\u0026#39;] sentence3 = [\u0026#39;bear\u0026#39;,\u0026#39;eat\u0026#39;,\u0026#39;six\u0026#39;,\u0026#39;fish\u0026#39;] print(\u0026#39;old man caught fish \u0026amp; bear hunted trout:\u0026#39;) phrase_vec(sentence1, sentence2) print(\u0026#39;old man caught fish \u0026amp; bear eat six fish:\u0026#39;) phrase_vec(sentence1, sentence3) print(\u0026#39;bear hunted trout \u0026amp; bear eat six fish:\u0026#39;) phrase_vec(sentence2, sentence3) old man caught fish \u0026amp; bear hunted trout: INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore glove sim: 0.36609688461789297 USE sim: 0.50494814 old man caught fish \u0026amp; bear eat six fish: INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore glove sim: 0.6818474640845398 USE sim: 0.5896743 bear hunted trout \u0026amp; bear eat six fish: INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore glove sim: 0.6082457470353315 USE sim: 0.72352856  Note: From the example above, we can see that USE and GloVe capture somewhat differently. We can see that bear hunted trout and bear eat six fish are the most similar to each other, whereas old man caught fish is also similar to the context of bear eating six fish.\nMore detailed analysis is required, but the example above shows great possibilities to exploring semantics.\nPlotting Similarity Matrix Now that we can compare similarity of words and sentences, we can plot a simple pairwise matrix, which basically compares how similar each word is to another in the given list. Fortunately, we already have a plot for doing it (using Seaborn).\nI will only use few words as demonstration, since it\u0026rsquo;s been slowing up my computer so much!\nplot_sim_matrix([\u0026#39;man\u0026#39;, \u0026#39;bear\u0026#39;, \u0026#39;fish\u0026#39;, \u0026#39;trout\u0026#39;]) INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore  Ending Note In the example above, we only used simple noun words. The stronger blue color, the more similar the two words are. Thus, the diagonal strip is deep blue (similarity of same two words is 1). You can see fish and trout are more similar to each other, than is man to trout.\nKeep in mind that you can feed in more words and sentences to create and visualize a larger matrix.\nWe looked at setting up USE locally, and creating embeddings from USE. The cloned project also has sample version of GloVe vectors. We use the vectors from the two models to extract vectors and compare similarity of two texts.\n","date":1541030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541030400,"objectID":"7a4f6295ae0d4e8a6165d80d69954fad","permalink":"https://jinjeon.me/post/vectorspace/","publishdate":"2018-11-01T00:00:00Z","relpermalink":"/post/vectorspace/","section":"post","summary":"From setting up TensorFlow to creating vectors and cosine similarity","tags":["python","machine-learning"],"title":"Universal Sentence Encoder and GloVe on Narrative Semantic Representation","type":"post"},{"authors":null,"categories":null,"content":"Note: This post is a ported version of Jupyter Notebook from my mne-eeg project: https://github.com/jeon11/mne-egi/blob/master/walkthrough_advanced.ipynb/walkthrough_basics.ipynb Advanced Processing In the previous walkthrough notebook, we got to manually inspect raw instance and do some cleaning based on annotations and creating evoked responses from time-locked events.\nIn this section, we run independent component analysis (ICA) on the epochs we had from the last notebook. We look in ICs to identify potentially bad components with eye related artifcats. Then, we implement autoreject (http://autoreject.github.io) which automatically attempts to find bad channels and interpolate those based on nearby channels. At the end, we plot the ERPs by channels that we are interested in looking and make comparison.\nNote that the plots below will be using print statements for demonstration purposes.\nimport mne import pandas as pd import numpy as np from matplotlib import pyplot as plt import Tkinter from autoreject import AutoReject from autoreject import get_rejection_threshold from mne.preprocessing import ICA Loading epochs We imported all the necessary dependencies. Now we load the saved epochs from last notebook.\nepochs_tlstS = mne.read_epochs(\u0026#39;/data/epochs_tlsts-epo.fif\u0026#39;, preload=True) print(epochs_tlstS) \u0026lt;EpochsFIF | 388 events (all good), -0.25 - 0.8 sec, baseline [-0.25, 0], ~72.8 MB, data loaded, with metadata, u'lstS': 388\u0026gt;  Running Independent Component Analysis (ICA) ICA is a signal processing method to decompose signals into independent sources from a mixed signal. A representative example is the cocktail party effect, which is a phenomenon in which you are able to concentrate on the voice of the speaker you are conversing with regardless of the various background noise in a party. Using ICA helps seperate the different sources of mixed sound, under the assumption that the sound components are linear. This method works for EEG signal preprocessing because we assume that each electrode is independent from the others. To think of it easily, I consider ICA as decomposing the data into multiple layers, and by excluding bad ICs, we filter the data.\n# the function calculates optimal reject threshold for ICA reject = get_rejection_threshold(epochs_tlstS) print(reject) Estimating rejection dictionary for eeg Estimating rejection dictionary for eog {'eeg': 0.0007759871430524497, 'eog': 5.903189072009943e-05}  Low-frequency slow drifts Because ICA is sensitive to low-frequency slow drifts, it is recommended that 1Hz highpass filter is applied. Since this was already done to our raw instance in the previous notebook, it can be skipped. You can double check as below, or apply the highpass filter if you haven\u0026rsquo;t already.\n# double check highpass filter print(epochs_tlstS.info[\u0026#39;highpass\u0026#39;]) # epochs_tlstS.info[\u0026#39;highpass\u0026#39;] = 1 1.0  Fit ICA Now we will run ICA on our epoch data. For simplicity and time sake, we will limit the number of components to 20 with fastICA method, which is the generally used one. The number of ICs can be created up to as many electrodes (in this case 128 - bad channels). In ica1.fit, we use the recommended reject threshold from Autoreject.\nica = ICA(n_components=20, max_pca_components=None, n_pca_components=None, noise_cov=None, random_state=None, method=\u0026#39;fastica\u0026#39;, fit_params=None, max_iter=200, verbose=None) print(\u0026#39;fitting ica...\u0026#39;) ica.fit(epochs_tlstS, reject=reject) fitting ica... /Users/Jin/Library/Python/2.7/lib/python/site-packages/scipy/linalg/basic.py:1321: RuntimeWarning: internal gelsd driver lwork query error, required iwork dimension not returned. This is likely the result of LAPACK bug 0038, fixed in LAPACK 3.2.2 (released July 21, 2010). Falling back to 'gelss' driver. x, resids, rank, s = lstsq(a, b, cond=cond, check_finite=False) \u0026lt;ICA | epochs decomposition, fit (fastica): 81868 samples, 20 components, channels used: \u0026quot;eeg\u0026quot;\u0026gt;  Artifact detection using ICA correlation plot_sources can show the signals of each ICs. We can manually inspect for ICs with noise, or identify bad ICs that correlates with oscillations from eye-related channels. We use the builtin find_bads_eog from ICA class.\nplot_scores will show the correlation values for each component, and mark the ones that are potentially bad with red. Note that because we only specified 20 components, the decomposition is rather compressed.\neog_inds, scores = ica.find_bads_eog(epochs_tlstS) print(\u0026#39;suggested eog component: \u0026#39; + str(eog_inds)) print(ica.plot_scores(scores, exclude=eog_inds, labels=\u0026#39;eog\u0026#39;)) suggested eog component: [3]  Figure(460.8x194.4)  The find_bads_eog suggested that component \u0026lsquo;3\u0026rsquo; is bad IC related to eye-related artifact. We can plot that specific component to inspect manually.\nprint(ica.plot_properties(epochs_tlstS, picks=eog_inds, psd_args={\u0026#39;fmax\u0026#39;: 35.}, image_args={\u0026#39;sigma\u0026#39;: 1.})) ica.exclude += eog_inds print(ica.exclude) /Users/Jin/Library/Python/2.7/lib/python/site-packages/mne/transforms.py:689: RuntimeWarning: invalid value encountered in divide out[:, 2] = np.arccos(cart[:, 2] / out[:, 0])  [\u0026lt;Figure size 504x432 with 5 Axes\u0026gt;] [3]  Usually, eye blinks are characterized as having significantly polar activities between the frontal and the posterior regions with high activity in the frontal region (ie. eyes). Also, activities shown in the frontal region, especially near the eye area, would not be helpful in our analysis. Eye movements are characterized as having significantly split activities between left and right. Component above does seem containing eye blinks, we mark that component bad by ica.exclude and we can see that component has been added.\nWe can also manually inspect for other components using plot_components besides the ones that the builtin method suggested. You can see that the component speficied above being grayed out as a bad IC. The plot prioritizes showing ICs with large activations and polarity, which means that most of the bad ICs could be found in the early ICs.\nprint(ica.plot_components(inst=epochs_tlstS)) [\u0026lt;Figure size 540x504 with 20 Axes\u0026gt;]  When running the code on ipython as suggested in the previous notebook, the plot is actually interactive. By clicking on the component, it shows the component properties. Clicking on the name of the component will gray out the name and be marked as bad IC. Here, it seems components 2, 14, and 18 have high activation in the eye regions, which could be identified as components with eye blinks. Also, componnent 5 has activation in the frontal region, and has polar activities between left and right, which could potentially be eye movements. Because the plot above is not interactive, we will specify which ICs to exclude as a line of code.\nSince we\u0026rsquo;ve identified the bad ICs, we can apply it to our epochs_tlstS, and proceed to autoreject.\nica.exclude += [0, 2, 5, 14, 18] print(ica.exclude) ica.apply(epochs_tlstS) print(\u0026#39;number of ICs dropped: \u0026#39; + str(len(ica.exclude))) [3, 0, 2, 5, 14, 18] number of ICs dropped: 6  Autoreject Now that we have bad ICs identified, we try implementing autoreject for cleaning. Note that the step below may take some time as it tries find bad channels and fix them.\nar = AutoReject() epochs_clean = ar.fit_transform(epochs_tlstS) Running autoreject on ch_type=eeg [........................................] 100.00% Creating augmented epochs \\ Computing thresholds ... [Parallel(n_jobs=1)]: Done 1 out of 1 | elapsed: 2.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 2 out of 2 | elapsed: 4.0s remaining: 0.0s [Parallel(n_jobs=1)]: Done 3 out of 3 | elapsed: 5.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 4 out of 4 | elapsed: 7.3s remaining: 0.0s [Parallel(n_jobs=1)]: Done 5 out of 5 | elapsed: 10.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 6 out of 6 | elapsed: 13.2s remaining: 0.0s [Parallel(n_jobs=1)]: Done 7 out of 7 | elapsed: 16.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 8 out of 8 | elapsed: 19.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 9 out of 9 | elapsed: 21.7s remaining: 0.0s [Parallel(n_jobs=1)]: Done 10 out of 10 | elapsed: 24.6s remaining: 0.0s [Parallel(n_jobs=1)]: Done 11 out of 11 | elapsed: 27.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 12 out of 12 | elapsed: 30.3s remaining: 0.0s [Parallel(n_jobs=1)]: Done 13 out of 13 | elapsed: 33.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 14 out of 14 | elapsed: 35.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 15 out of 15 | elapsed: 36.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 16 out of 16 | elapsed: 38.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 17 out of 17 | elapsed: 40.2s remaining: 0.0s [Parallel(n_jobs=1)]: Done 18 out of 18 | elapsed: 42.2s remaining: 0.0s [Parallel(n_jobs=1)]: Done 19 out of 19 | elapsed: 44.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 20 out of 20 | elapsed: 47.0s remaining: 0.0s [Parallel(n_jobs=1)]: Done 21 out of 21 | elapsed: 48.7s remaining: 0.0s [Parallel(n_jobs=1)]: Done 22 out of 22 | elapsed: 50.1s remaining: 0.0s [Parallel(n_jobs=1)]: Done 23 out of 23 | elapsed: 51.6s remaining: 0.0s [Parallel(n_jobs=1)]: Done 24 out of 24 | elapsed: 53.1s remaining: 0.0s [Parallel(n_jobs=1)]: Done 25 out of 25 | elapsed: 54.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 26 out of 26 | elapsed: 56.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 27 out of 27 | elapsed: 57.9s remaining: 0.0s [Parallel(n_jobs=1)]: Done 28 out of 28 | elapsed: 59.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 29 out of 29 | elapsed: 1.0min remaining: 0.0s [Parallel(n_jobs=1)]: Done 30 out of 30 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 31 out of 31 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 32 out of 32 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 33 out of 33 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 34 out of 34 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 35 out of 35 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 36 out of 36 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 37 out of 37 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 38 out of 38 | elapsed: 1.3min remaining: 0.0s [Parallel(n_jobs=1)]: Done 39 out of 39 | elapsed: 1.3min remaining: 0.0s [Parallel(n_jobs=1)]: Done 40 out of 40 | elapsed: 1.3min remaining: 0.0s [Parallel(n_jobs=1)]: Done 41 out of 41 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 42 out of 42 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 43 out of 43 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 44 out of 44 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 45 out of 45 | elapsed: 1.5min remaining: 0.0s [Parallel(n_jobs=1)]: Done 46 out of 46 | elapsed: 1.5min remaining: 0.0s [Parallel(n_jobs=1)]: Done 47 out of 47 | elapsed: 1.5min remaining: 0.0s [Parallel(n_jobs=1)]: Done 48 out of 48 | elapsed: 1.6min remaining: 0.0s [Parallel(n_jobs=1)]: Done 49 out of 49 | elapsed: 1.6min remaining: 0.0s [Parallel(n_jobs=1)]: Done 50 out of 50 | elapsed: 1.6min remaining: 0.0s [Parallel(n_jobs=1)]: Done 115 out of 115 | elapsed: 3.8min finished [........................................] 100.00% n_interp \\ chs | Estimated consensus=0.30 and n_interpolate=4 [........................................] 100.00% Repairing epochs |  The above created a new epochs called epochs_clean. We can compare how the epochs are cleaned by comparing the two plots. For demonstration, we only plot the epochs_clean. The plot shows individual epochs with green line being 0 (the onset of the word in the experiment). In the interactive plot mode, you can scroll vertically to see different channels and horizontally to search through epochs.\nprint(epochs_clean.plot()) Figure(869.6x536.8)  Creating evoked response from epochs_clean Now that we have a new, ideally cleaner epochs, we create evoked response for each condition. Currently, epochs_clean contains all four conditions with approximately 100 epochs for each (less than 400 now because epochs been rejected). Note that the y-axis microvolt scale has been refined compared to our previous notebook.\n# now let\u0026#39;s create a new evoked responses (ie. the autoreject evoked) arevoked_tlst_c1 = epochs_clean[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;1\u0026#39;\u0026#34;].average() arevoked_tlst_c2 = epochs_clean[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;2\u0026#39;\u0026#34;].average() arevoked_tlst_c3 = epochs_clean[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;3\u0026#39;\u0026#34;].average() arevoked_tlst_c4 = epochs_clean[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;4\u0026#39;\u0026#34;].average() # let\u0026#39;s see a sample evoked response print(arevoked_tlst_c1.plot_joint(times=\u0026#39;peaks\u0026#39;)) Figure(576x302.4)  Plotting ERP comparison Now that we have evoked response for each condition, we can look into specific channels of interest to see how the signals differ by conditions. For the selection list, we will only specify channel E92 as it will create 4 graphs for each channel.\n# we specify which channels to look at selection = [\u0026#39;E92\u0026#39;] # [\u0026#39;EB\u0026#39;,\u0026#39;E11\u0026#39;,\u0026#39;E24\u0026#39;,\u0026#39;E124\u0026#39;,\u0026#39;E36\u0026#39;,\u0026#39;E104\u0026#39;,\u0026#39;E52\u0026#39;,\u0026#39;E62\u0026#39;,\u0026#39;E92\u0026#39;] picks_select = mne.pick_types(epochs_clean.info, meg=False, eeg=True, eog=True, stim=False, exclude=\u0026#39;bads\u0026#39;, selection=selection) # create dictionary for each condition evoked_dict = {\u0026#39;highcosval\u0026#39;: arevoked_tlst_c1, \u0026#39;lowcosval\u0026#39;: arevoked_tlst_c2, \u0026#39;highcosinval\u0026#39;: arevoked_tlst_c3, \u0026#39;lowcosinval\u0026#39;: arevoked_tlst_c4} picks_select = mne.pick_types(arevoked_tlst_c1.info, meg=False, eeg=True, eog=True, stim=False, exclude=\u0026#39;bads\u0026#39;, selection=selection) # this will plot each selected channel with comparison of two conditions title = \u0026#39;%s_vs_%s_E%s.png\u0026#39; for i in range(0, len(picks_select)): fig1 = mne.viz.plot_compare_evokeds({\u0026#39;highcos/val\u0026#39;:evoked_dict[\u0026#39;highcosval\u0026#39;], \u0026#39;lowcos/val\u0026#39;:evoked_dict[\u0026#39;lowcosval\u0026#39;]}, picks=picks_select[i]) fig2 = mne.viz.plot_compare_evokeds({\u0026#39;highcos/inval\u0026#39;:evoked_dict[\u0026#39;highcosinval\u0026#39;], \u0026#39;lowcos/inval\u0026#39;:evoked_dict[\u0026#39;lowcosinval\u0026#39;]}, picks=picks_select[i]) fig3 = mne.viz.plot_compare_evokeds({\u0026#39;highcos/val\u0026#39;:evoked_dict[\u0026#39;highcosval\u0026#39;], \u0026#39;highcos/inval\u0026#39;:evoked_dict[\u0026#39;highcosinval\u0026#39;]},picks=picks_select[i]) fig4 = mne.viz.plot_compare_evokeds({\u0026#39;lowcos/val\u0026#39;:evoked_dict[\u0026#39;lowcosval\u0026#39;], \u0026#39;lowcos/inval\u0026#39;:evoked_dict[\u0026#39;lowcosinval\u0026#39;]}, picks=picks_select[i]) # save figs # fig1.savefig(title % (evoked_dict.keys()[0], evoked_dict.keys()[1], i)) # fig2.savefig(title % (evoked_dict.keys()[2], evoked_dict.keys()[3], i)) # fig3.savefig(title % (evoked_dict.keys()[0], evoked_dict.keys()[2], i)) # fig4.savefig(title % (evoked_dict.keys()[1], evoked_dict.keys()[3], i)) # this will plot just the evoked responses per conditions with all channels fig5 = arevoked_tlst_c1.plot(titles=\u0026#39;cond1: high cos/val\u0026#39;) fig6 = arevoked_tlst_c2.plot(titles=\u0026#39;cond2: low cos/val\u0026#39;) fig7 = arevoked_tlst_c3.plot(titles=\u0026#39;cond3: high cos/inval\u0026#39;) fig8 = arevoked_tlst_c4.plot(titles=\u0026#39;cond4: low cos/inval\u0026#39;) # save figs # fig5.savefig(\u0026#39;c1all.png\u0026#39;) # fig6.savefig(\u0026#39;c2all.png\u0026#39;) # fig7.savefig(\u0026#39;c3all.png\u0026#39;) # fig8.savefig(\u0026#39;c4all.png\u0026#39;) Sources and useful links EEGLab ICA guide: https://sccn.ucsd.edu/wiki/Chapter_09:_Decomposing_Data_Using_ICA\nMNE ICA class: https://martinos.org/mne/stable/generated/mne.preprocessing.ICA.html\nautoreject: http://autoreject.github.io/auto_examples/plot_auto_repair.html#sphx-glr-auto-examples-plot-auto-repair-py\nClemens Brunner\u0026rsquo;s great guide on ICA: https://cbrnr.github.io/2018/01/29/removing-eog-ica/\nClemens Brunner\u0026rsquo;s great guide on EOG detection using linear regression: https://cbrnr.github.io/2017/10/20/removing-eog-regression/\nMNE stats: https://martinos.org/mne/stable/auto_tutorials/plot_stats_cluster_erp.html#sphx-glr-auto-tutorials-plot-stats-cluster-erp-py\n","date":1525219200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525219200,"objectID":"a8fa2f40e29fb9bac38d1afe68ac5f18","permalink":"https://jinjeon.me/post/eeg-advanced/","publishdate":"2018-05-02T00:00:00Z","relpermalink":"/post/eeg-advanced/","section":"post","summary":"Continuation from Part 1, the script runs independent component analysis and automatic epoch rejection, and plots improved ERP","tags":["python"],"title":"EEG/Signal Processing--Advanced Part 2","type":"post"},{"authors":null,"categories":null,"content":"Note: This post is a ported version of Jupyter Notebook from my mne-eeg project: https://github.com/jeon11/mne-egi/blob/master/walkthrough_basics.ipynb Overview This script runs through sample experiment data from manually reading in raw file to preprocessing through applying filters, eye blink detection using peak finding techniques. Then we create epochs and plot evoked responses.\nIn the advanced walkthrough: walkthrough_advanced.ipynb, we implement independent component analysis (ICA) and autoreject, which is an automated tool for fixing data, to see how the epochs are improved and compare the evoked responses by conditions.\nThe script requires at least two files:\n the raw data (download from Google Drive ~500MB) exported event text log from NetStation software  Running the script in command line When running the Python script from command line, MNE recommends using ipython via:\nipython —-pylab osx -i mne-egi-walkthrough.py For Windows, instead of osx, you would be specifying qt.\nImporting Let\u0026rsquo;s begin by importing all the necessary modules. Make sure you have all the required dependencies setup.\nimport mne import pandas as pd import numpy as np import matplotlib from matplotlib import pyplot as plt from mne.preprocessing import eog from mne.preprocessing import create_eog_epochs from mne.preprocessing.peak_finder import peak_finder import Tkinter import extract_nslog_event Setting basic variables Before we begin any preprocessing, we create variables here to specify what we want to look for. The whole script basically requires two main files.\n raw_fname: The raw instance of eeg data file in .raw format ns_eventlog: Netstation\u0026rsquo;s event exports in text  The selection variable is later used to specify which channels to plot and compare. Note, the first item in the selection list, EB channel is a virtual channel created from bipolar referene.\n# specify sample subject data directory raw_fname = \u0026#39;/Users/Jin/Documents/MATLAB/research/mne-egi/data/sfv_eeg_011ts.raw\u0026#39; ns_eventlog = \u0026#39;/Users/Jin/Documents/MATLAB/research/mne-egi/data/sfv_eeg_011ts_nsevent\u0026#39; # specify sub-sample of channels to look in detail selection = [\u0026#39;EB\u0026#39;,\u0026#39;E11\u0026#39;,\u0026#39;E24\u0026#39;,\u0026#39;E124\u0026#39;,\u0026#39;E36\u0026#39;,\u0026#39;E104\u0026#39;,\u0026#39;E52\u0026#39;,\u0026#39;E62\u0026#39;,\u0026#39;E92\u0026#39;] Reading in raw file Raw eeg data can be read in with a simple line below. You can specify montage kind in strings. See https://martinos.org/mne/dev/generated/mne.channels.read_montage.html for available montages. We set preload=True because some of the preprocessing functions require raw file to be preloaded.\nOnce the raw file is loaded, typing raw and raw.info will show details about the raw instance.\nprint(\u0026#39;reading raw file...\u0026#39;) raw = mne.io.read_raw_egi(raw_fname, montage=\u0026#39;GSN-HydroCel-128\u0026#39;, preload=True) print(\u0026#39;Done!\u0026#39;) reading raw file... \u0026lt;ipython-input-3-8bc42ae4bead\u0026gt;:2: RuntimeWarning: The following EEG sensors did not have a position specified in the selected montage: ['E129']. Their position has been left untouched. raw = mne.io.read_raw_egi(raw_fname, montage='GSN-HydroCel-128', preload=True) Done!  print(raw) # see the first ten list of channel names (note by default, prefix \u0026#39;E\u0026#39; is appended) print(raw.info[\u0026#39;ch_names\u0026#39;][0:10]) # see highpass \u0026amp; lowpass filter print(\u0026#39;highpass filter: \u0026#39; + str(raw.info[\u0026#39;highpass\u0026#39;])) print(\u0026#39;lowpass filter: \u0026#39; + str(raw.info[\u0026#39;lowpass\u0026#39;])) \u0026lt;RawEGI | sfv_eeg_011ts.raw, n_channels x n_times : 136 x 989490 (4947.4 sec), ~1.00 GB, data loaded\u0026gt; ['E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9', 'E10'] highpass filter: 0.0 lowpass filter: 100.0  Applying bandpass filter Our first preprocessing step will be applying the bandpass filter of 1Hz and 30Hz. The numbers can be played around with, but this filter range will potentially remove general noise from environment and slow drifting signals. Other suggestions for highpass is 0.1; for 40 Hz lowpass.\nAfter bandpass filter is applied, type raw.info to check how raw.filter made changes.\n# apply bandpass filter to raw file (highpass, lowpass) raw.filter(1,30) # see highpass \u0026amp; lowpass filter print(\u0026#39;highpass filter: \u0026#39; + str(raw.info[\u0026#39;highpass\u0026#39;])) print(\u0026#39;lowpass filter: \u0026#39; + str(raw.info[\u0026#39;lowpass\u0026#39;])) highpass filter: 1.0 lowpass filter: 30.0  Creating meta dataframe We will deviate a little from processing raw file, and construct a dataframe that can be later used for effectively creating epochs or querying information we just need. This part uses the custom built module (also experiment specific as each experiment will have different paradigms and event tags). The extract_nslog_event constructs necessary pandas dataframe from ns_eventlog text file which we specified earlier in #Setting-basic-variables.\ncreate_df returns five dataframes, in which nsdata is a list from simply csv-read file that is used to create task-specific pandas dataframes. For example, df_lst is the initial dataframe created that includes all practice, trials, and sentences tasks. The rest of dfs contain task specific data.\n# create pandas data frames for different tasks nsdata, df_lst, df_plst, df_tlst, df_slst = extract_nslog_event.create_df(ns_eventlog) creating data frame from ns event log... dataframes created for subject 011 trials found: 800 sentences found: 200  From now on, for simplicity sake, we will only examine the actual trials task part in this walkthrough. We can focus on looking at the data structure of trials task. Since the dataframe is already created specifically for trials, what we really want now is the onset (sample numbers) of when the event occured and the condition of the stimuli that was presented.\n# show data frame structure of 2rd index print(df_tlst.iloc[2]) code tlst label lstS onset 99867 cond 4 indx 1 Name: 2, dtype: object  The label for trials task was either a last word start (lstS) or last word end (lstE). Since we are interested in the onset of the word, we will extract just the onsets using the custom code.\n# create onset-only data frame (event tag specifications) df_tlstS = extract_nslog_event.create_df_onset(df_tlst) # show total events of interest len(df_tlstS) 400  Finding impedance check periods and annotating Now that we have dataframes setup, we continue to clean up the raw data. Throughout the acquisition, we ran impedance checks to make sure that all electrodes were in good contact with the scalp and that good signal is being read in. During the impedance check, the waveforms peak in extreme amount and we want to make note of these periods, telling the mne functions to avoid and ignore such periods.\n# find impedance onsets imp_onset, imp_offset, imp_dur = extract_nslog_event.find_impedances(nsdata) # annotate on raw with \u0026#39;bad\u0026#39; tags (params `reject_by_annotation` will search for \u0026#39;bad\u0026#39; tags later) annot_imp = mne.Annotations(imp_onset, imp_dur, [\u0026#34;bad imp\u0026#34;] * len(imp_onset), orig_time=raw.info[\u0026#39;meas_date\u0026#39;]) raw.set_annotations(annot_imp) finding impedance periods... found 4 impedance periods! \u0026lt;RawEGI | sfv_eeg_011ts.raw, n_channels x n_times : 136 x 989490 (4947.4 sec), ~1.00 GB, data loaded\u0026gt;  Marking bad channels We also want to make note of bad channels. We can manually inspect for bad channels by seeing the actual raw data. raw.plot will show the actual raw file with annotations from above marked as red segments. You can inspect for good/bad channels and manually click on bad channels to mark them bad. Once you manually inspected the channels, type raw.info['bads'] to see how it is updated.\nNote that the plot below is a static figure for example sake. Running the code in ipython will allow us to horizontally and vertically scroll through data. Clicking on a channel will mark that channel red and be considered red. You can see that we\u0026rsquo;ve ran four impedance checks throughout the session (1 task switch period, every 100th trials out fo 400).\n# block=True is useful because it will wait to whatever change you make in the raw file at the plot stage print(raw.plot(bad_color=\u0026#39;red\u0026#39;, block=True)) Figure(782.64x483.12)  If you already had a list of bad channels noted during the acquisition period, you can skip the above manual inspection and simply specify the bad channels with a line of code:\nraw.info[\u0026#39;bads\u0026#39;] = [\u0026#39;E127\u0026#39;, \u0026#39;E107\u0026#39;, \u0026#39;E49\u0026#39;, \u0026#39;E48\u0026#39;, \u0026#39;E115\u0026#39;, \u0026#39;E113\u0026#39;, \u0026#39;E122\u0026#39;, \u0026#39;E121\u0026#39;, \u0026#39;E123\u0026#39;, \u0026#39;E108\u0026#39;, \u0026#39;E63\u0026#39;, \u0026#39;E1\u0026#39;] print(raw.info[\u0026#39;bads\u0026#39;]) ['E127', 'E107', 'E49', 'E48', 'E115', 'E113', 'E122', 'E121', 'E123', 'E108', 'E63', 'E1']  Detecting and rejecting eye blinks We\u0026rsquo;ve so far applied generic/broad preprocessing steps, such as bandpass filters, marking chunks of bad segments, and marking bad channels. Now we will look at finding eye blinks in the raw and add more annotations to mark those samples bad.\nStep 1: Setting bipolar reference Because the cap we use do not have EOG-specific channels, we use the channels that are nearest to the eyes and consider those as our virtual eye channels. Thus, such method has the risk of the eye channels actually not having just the eye-related oscillations. This is done by setting the bipolar reference, which is basically the subtraction of two opposing channels (ie. the top and bottom of each eye for eye blinks; the left and right of the eyes for eye movements).\nHere, we use just the right side of the eye only to detect eye blinks. From the subtraction of channel E8 and E126, a virtual channel EB is created.\n# let\u0026#39;s begin eye artifact detections print(\u0026#39;Starting EOG artifact detection\u0026#39;) raw = mne.set_bipolar_reference(raw, [\u0026#39;E8\u0026#39;],[\u0026#39;E126\u0026#39;],[\u0026#39;EB\u0026#39;]) # specify this as the eye channel raw.set_channel_types({\u0026#39;EB\u0026#39;: \u0026#39;eog\u0026#39;}) # double check the changes # print(raw.info[\u0026#39;chs\u0026#39;]) Starting EOG artifact detection  Step 2: Detecting eye blinks Now that we have a virtual eye channel to inspect, we can try to identify any eye blinks. Because the virtual eye channel that is created from subtraction of the channels, the waveform of EB channel will be generally flat. You can inspect this by raw.plot.\nEye blinks are generally characterized as two eye channels having sudden opposing peaks. So the methodology is to find a sudden peak within the flat EB line. We have the options of:\n finding eye blinks via mne built in function finding eye blinks via scipy peak finding method  Both results in similar eye blink detections because the methodology of finding local peaks. We will only use the mne built in function and comment out the custom built function that uses scipy. reject_by_annotation will ignore the bad segments marked as bad earlier. The threshold of 0.0001 can be played around with but it is a reasonable threshold set after having manually inspect the data. The events_eog will be an array with [sample number, 0, eventlabel in number]\nevents_eog = eog.find_eog_events(raw, reject_by_annotation=True, thresh=0.0001, verbose=None) # type `help(scipy_annotate_eyeblinks)` for detail # raw = scipy_annotate_eyeblinks(raw, \u0026#39;EB\u0026#39;, 100) print(\u0026#39;number of eye blinks detected: \u0026#39; + str(len(events_eog))) number of eye blinks detected: 1720  events_eog above will give where the eye blinks occured in samples. We will convert the sample number to seconds so we can annotate on the raw file.\n# get just the sample numbers from the eog events eog_sampleN = [i[0] for i in events_eog] # convert to seconds for annotation-friendly purposes for i in range(0, len(eog_sampleN)): eog_sampleN[i] = eog_sampleN[i] / float(200) # set annotation annot_eog = mne.Annotations(eog_sampleN, [0.1] * len(eog_sampleN), [\u0026#34;bad eye\u0026#34;] * len(eog_sampleN), orig_time = raw.info[\u0026#39;meas_date\u0026#39;]) # add this eye blink annotation to the previous annotation by simply adding new_annot = annot_imp + annot_eog raw.set_annotations(new_annot) print(\u0026#39;new annotation set!\u0026#39;) new annotation set!  Now that new annotation is set, let\u0026rsquo;s see the changes made to the raw. Again we will just have a figure printed out here. You can see the bad channels marked red (like E1), and bunch of red bars that potentially mark spikes/eye blinks. Because the Times x-axis is so zoomed out, we see all parts being red, but as we see the plot above, that is actually not true. We see that \u0026lsquo;bad eye\u0026rsquo; is annotated for any potential peaks in the \u0026lsquo;EB\u0026rsquo; channel that is newly created from bipolar reference.\n# you can check that more red segments are marked on the raw file print(raw.plot(bad_color=\u0026#39;red\u0026#39;)) Figure(782.64x483.12)  Setting rereference Now that bad channels are marked and we know which bad segments to avoid, we will set eeg reference (We want to avoid doing reference before the bad data are marked and rejected).\nprint(\u0026#39;setting eeg reference...\u0026#39;) raw.set_eeg_reference(\u0026#39;average\u0026#39;, projection=True) setting eeg reference... \u0026lt;RawEGI | sfv_eeg_011ts.raw, n_channels x n_times : 135 x 989490 (4947.4 sec), ~1019.5 MB, data loaded\u0026gt;  Creating epochs Now that we have done some primary artifact detections, we can create a first look on how our epochs look. Epochs are time-locked events of interest. Here, we look at the few hundred milliseconds before and after the onset of the last word of a sentence presentation. Before creating the epochs, we will run some custom codes to update the event arrays accordingly so the event labels are properly labeled ie. 1 for onsets, 2 for offsets.\n# first find events related to tlst stim channel in the cleaned raw events_tlst = mne.find_events(raw, stim_channel=\u0026#39;tlst\u0026#39;) # events_tlst is a array structure ie. (1, 0, 1) and so far, the all the event tags are 1 which is not true # We will update the event tags with 1s and 2s with custom built function # update event ids in mne events array and double check sampling onset timing as sanity check events_tlstS = extract_nslog_event.assign_event_id(df_tlst, events_tlst) updating mne event array and double checking sampling onset time...  # epoching initially with metadata applied event_id_tlst = dict(lstS=1) tmin = -0.25 # start of each epoch tmax = 0.8 # end of each epoch # set baseline to 0 baseline = (tmin, 0) # picks specify which channels we are interested picks = mne.pick_types(raw.info, meg=False, eeg=True, eog=True, stim=False, exclude=\u0026#39;bads\u0026#39;) # `metadata` field is used to put in our comprehensive pandas dataframe # it is useful for later creating evoked responses by conditions epochs_tlstS = mne.Epochs(raw, events_tlstS, event_id_tlst, tmin, tmax, proj=False, picks=picks, baseline=baseline, preload=True, reject=None, reject_by_annotation=True, metadata=df_tlstS) print(\u0026#39;epochs_tlstS:\u0026#39;) print(epochs_tlstS) epochs_tlstS: \u0026lt;Epochs | 388 events (all good), -0.25 - 0.8 sec, baseline [-0.25, 0], ~72.8 MB, data loaded, with metadata, 'lstS': 388\u0026gt;  We created epochs named epochs_tlstS which is mne\u0026rsquo;s epochs instance. Note that the epochs are 388 instead of original 400. It is likely that the some epochs are dropped from annotations. Let\u0026rsquo;s see if it\u0026rsquo;s true.\n# show drop percentage from mne.Epochs drop_count = 0 for j in range(0, len(epochs_tlstS.drop_log)): if \u0026#39;bad eye\u0026#39; in epochs_tlstS.drop_log[j]: drop_count += 1 print(str(drop_count) + \u0026#39; epochs dropped by eog annotation\u0026#39;) print(\u0026#39;perecentage dropped: \u0026#39; + str(epochs_tlstS.drop_log_stats())) 12 epochs dropped by eog annotation perecentage dropped: 3.0  Creating evoked response (ERP) Everything looks good. We can create an evoked response by condition. Currently, the epochs_tlst contains all four conditions of the task. By creating an evoked response by condition, we can examine the data for each condition.\n# create evoked respone using pandas query based on metadata created from previous epochs evoked_tlst_c1 = epochs_tlstS[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;1\u0026#39;\u0026#34;].average() evoked_tlst_c2 = epochs_tlstS[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;2\u0026#39;\u0026#34;].average() evoked_tlst_c3 = epochs_tlstS[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;3\u0026#39;\u0026#34;].average() evoked_tlst_c4 = epochs_tlstS[\u0026#34;label==\u0026#39;lstS\u0026#39; and cond==\u0026#39;4\u0026#39;\u0026#34;].average() Evoked responses are created by condition. Let\u0026rsquo;s just inspect the first one. The figure below will show the waveforms of all channels (except the ones marked bad and bipolar referenced channels) with total N epochs in that condition. Originally, N=100 for each condition.\nWe can see something happening at 100ms to 300ms range after the onset of the word, which is time point 0s.\nprint(evoked_tlst_c1.plot()) Figure(460.8x216)  Figure above is in black and could be hard to inspect. A more interesting plot could be using plot_joint method. You can see that most of the channels in the frontal region are showing flat, insignificant patterns. On the other hand, the right occipital (marked in red, purplish colors) is revealing potentially interesting results.\nprint(evoked_tlst_c1.plot_joint(times=\u0026#39;peaks\u0026#39;)) /Users/Jin/Library/Python/2.7/lib/python/site-packages/mne/transforms.py:689: RuntimeWarning: invalid value encountered in divide out[:, 2] = np.arccos(cart[:, 2] / out[:, 0])  Figure(576x302.4)  To avoid going through the same process everytime you load in a subject, we can save the progress by saving the resulted epochs (ie. epochs_tlstS or raw instance). In the other notebook, we will continue with more advanced artifact detection using the saved epochs.\nepochs_tlstS.save(\u0026#39;epochs_tlsts-epo.fif\u0026#39;, split_size=\u0026#39;2GB\u0026#39;, fmt=\u0026#39;single\u0026#39;, verbose=True) Sources and useful links MNE querying metadata: https://martinos.org/mne/stable/auto_examples/preprocessing/plot_metadata_query.html\nMNE annotations: https://martinos.org/mne/stable/generated/mne.Annotations.html\n","date":1525132800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525132800,"objectID":"c1741a55e6e61866ee701e693039a694","permalink":"https://jinjeon.me/post/eeg-basics/","publishdate":"2018-05-01T00:00:00Z","relpermalink":"/post/eeg-basics/","section":"post","summary":"This script runs through sample experiment data from manually reading in raw file to preprocessing through applying filters, eye blink detection using peak finding techniques. Then we create epochs and plot evoked responses.","tags":["python"],"title":"EEG/Signal Processing--Basics Part 1","type":"post"},{"authors":null,"categories":null,"content":"Shadow casting possess different physical affordances that follow the laws of physics. Different shadow shapes and patterns can be created by manipulating the shadow’s light source direction and intensity, the physical object’s distance and angle, and the texture of the surface in which the shadow is casted. These physical properties can be used by the operator to create creative patterns with the projected shadows. Some of these physical affordances include playing with the shadow’s movement, superposing different object’s shadows and scaling the shadow’s size by moving the physical object closer or further from the light source. As aesthetically pleasing with its unique black and white contrast, shadows are a fascinating form of media that can create different textures and details based on the skill of the user.Shadow Play aims to enhance such a playful shadow experience to more advanced creative form of art by allowing users digitally manipulate their shadows. By adding new digital affordances Shadow Play, users can print and add layers of multiple shadows onto the screen, and invigorate them with animated effects and motions. With such various mix of augmented shadow effects, users can utilize their body as a tool for creating their own unique shadow artwork and animations.See full paper Summary of interaction:Input/Output: Shadow Play requires ample activity space for interaction. The system recognizes the user within the activity space, and then displays the digitally augmented shadow onto the projected screen. Optimizing the interaction was one of our key concerns. With camera as an input device for users to communicate with Shadow Play, we wanted to depict the metaphor of users taking pictures and filming the creation. By selecting different features, such as snapshot, mirror, effects, and loop, users can create unique patterns and artwork. Interaction:1. Setting the environment: With the shoot feature, users can add layers of current shadows to the previous ones. Users can create static shadows, in which we refer to as background/environment of the artwork. 2. Adding in motion and effects: After the environment has been set, users can enliven the shadow by adding in animated motions and effects. The loop feature, mainly inspired by Instagram, records the motion of shadows and then is automatically looped. By adding in the fireball effect, Shadow Play recognizes the hand motion of reaching out, which then shoots out a fireball from the tip of the hand. 3. Advanced: Mirror and Patterns: The mirror feature allows users to create symmetrical images and animation. The mirror feature is especially useful for creating patterns and symmetrical image, such as butterfly. With the mix of these features, users can create shadow artwork in playful environment. Shadow Play resembles the thought process and planning of an actual painting. Just as an artist would plan ahead where certain objects would be placed within the space before making the strokes, Shadow Play users have to deliberately organize the angle and distance of their body in order to perfect the layers of shadow into a single object shape. Such deliberation allows for more playful and interactive activity. By having the augmented shadows displayed on the screen, there is a loop of feedback and manipulation as users constantly refer to the captured shadow to make adjustments accordingly.\u0026quot;\n","date":1512864000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512864000,"objectID":"f46be14934638585765b16715a31a0d7","permalink":"https://jinjeon.me/project-archives/shadowplay/","publishdate":"2017-12-10T00:00:00Z","relpermalink":"/project-archives/shadowplay/","section":"project-archives","summary":"Shadow Play aims to enhance playful shadow experience to more advanced creative form of art by allowing users digitally manipulate their shadows. By adding new digital affordances Shadow Play, users can print and add layers of multiple shadows onto the screen, and invigorate them with animated effects and motions. With such various mix of augmented shadow effects, users can ...","tags":["side-projects"],"title":"Tangible UI: Augmented Shadow Play","type":"project-archives"},{"authors":null,"categories":null,"content":"Object classification is essential to human learning as it helps us cope with various stimulus around the world. Regardless of multiple features within a single object, object classification seems to occur seamlessly within our cognitive process. In this experiment, we test how we prioritize each feature within an object and how these features are weighted when we categorize a certain object. Test subjects were given novel shapes that each featured either size, color, or orientation, and had to determine whether the shape belongs to a category of a given prototypical shape. The preliminary result showed that color was the single most determining feature when categorizing an object, showing 72.6% of incorporation in all trials, while orientation was the least with 60.7%, but the differences were not statistically significant. We further went on to use logistic regression to analyze the result, which showed thresholds for identifying a novel object to be in a certain category. However, these thresholds for each feature was not significantly different. The experiment suggests that categorization is more of an elaborate and holistic process that combines different features when categorizing a novel object.\n","date":1494374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1494374400,"objectID":"fca828c759df5853ec9108d04afd3cbe","permalink":"https://jinjeon.me/project-archives/featureprioritization/","publishdate":"2017-05-10T00:00:00Z","relpermalink":"/project-archives/featureprioritization/","section":"project-archives","summary":"Object classification is essential to human learning as it helps us cope with various stimulus around the world. Regardless of multiple features within a single object, object classification seems to occur seamlessly within our cognitive process. In this experiment, we test how we prioritize each feature within an object and how these features are weighted when we categorize a certain","tags":["side-projects"],"title":"Feature Prioritization in Classification of Novel Objects","type":"project-archives"},{"authors":null,"categories":null,"content":"By analyzing Yelp’s dataset, specifically star ratings and text reviews, we created a classifier that predicts whether reviews are positive (star ratings of four or five) or negative (star ratings of one or two). We excluded star ratings of three because we weren’t sure whether they were positive or negative. While Yelp’s star ratings are helpful for concise overview of local businesses, they are also crucial metrics for businesses as the ratings reflect their reputations. However, we realized that star ratings are often misleading as they are subject to user bias and preference. Thus, we wanted to predict ratings solely based on textual features of the reviews and exclude any potential human errors and biases. Performing logistic regression with the combined five features, we were able to correctly predict the reviews with an overall accuracy of 79%.\n","date":1481328000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1481328000,"objectID":"8eac6324b89d5d36c06d023bd6e34fa8","permalink":"https://jinjeon.me/project-archives/yelp/","publishdate":"2016-12-10T00:00:00Z","relpermalink":"/project-archives/yelp/","section":"project-archives","summary":"By analyzing Yelp’s dataset, specifically star ratings and text reviews, we created a classifier that predicts whether reviews are positive (star ratings of four or five) or negative (star ratings of one or two). We excluded star ratings of three because we weren’t sure whether they were positive or negative. While Yelp’s star ratings are helpful for concise overview of local businesses","tags":["side-projects"],"title":"Yelp Dataset Challenge","type":"project-archives"},{"authors":null,"categories":null,"content":"Timeline: June 2015 - Nov 2015 Impact  I received 5K funding from Rehoboth Business Idea Competition State government support with free office space in the tech hub valley Developed storyboard and high fidelity prototype through iterations of market research, surveys, and user testing Hired a software engineer to develop into an app   Problem Statement We are spending the least time with the most important people in our lives, family, while spending more and more time with strangers, coworkers and friends. The cause of the problem has been generally identified as increased work and commute time, and busier individual routines.\nDesign Question   Mission Homy attempts to solve this growing social problem by recreating online home and allowing families to seamlessly connect. With unique post-it style fridge page, Homy wants to encourage families to communicate more often. The mission is to provide emotional communication service to enrich family’s real, offline relationship.    Click to see in large view. My initial iteration of the prototype using Proto.io The Fridge, the landing page, recreates the experience of having post-it notes on the kitchen fridge       Click to see in large view      Click to see in large view      Click to see in large view      Click to see in large view      Click to see in large view   Check more at:\u0026lt;a href=\u0026quot;/pdf/Homy_A1.pdf\u0026quot; target=\u0026quot;blank\u0026quot;\u0026gt; Defining Market Opportunity.pdf","date":1447113600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1447113600,"objectID":"9888f51c7d72004fa32e0149615976f3","permalink":"https://jinjeon.me/project-archives/homy/","publishdate":"2015-11-10T00:00:00Z","relpermalink":"/project-archives/homy/","section":"project-archives","summary":"Ideated and developed a prototype to win $5k funding and government support","tags":["side-projects"],"title":"Homy, private social network for families","type":"project-archives"}]